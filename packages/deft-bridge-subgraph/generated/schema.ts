// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Proof extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proof entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proof entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proof", id.toString(), this);
  }

  static load(id: string): Proof | null {
    return store.get("Proof", id) as Proof | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get nonce(): BigInt | null {
    let value = this.get("nonce");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt | null) {
    if (value === null) {
      this.unset("nonce");
    } else {
      this.set("nonce", Value.fromBigInt(value as BigInt));
    }
  }

  get src(): i32 {
    let value = this.get("src");
    return value.toI32();
  }

  set src(value: i32) {
    this.set("src", Value.fromI32(value));
  }

  get srcType(): i32 {
    let value = this.get("srcType");
    return value.toI32();
  }

  set srcType(value: i32) {
    this.set("srcType", Value.fromI32(value));
  }

  get dest(): i32 {
    let value = this.get("dest");
    return value.toI32();
  }

  set dest(value: i32) {
    this.set("dest", Value.fromI32(value));
  }

  get destType(): i32 {
    let value = this.get("destType");
    return value.toI32();
  }

  set destType(value: i32) {
    this.set("destType", Value.fromI32(value));
  }

  get srcToken(): string {
    let value = this.get("srcToken");
    return value.toString();
  }

  set srcToken(value: string) {
    this.set("srcToken", Value.fromString(value));
  }

  get destToken(): string {
    let value = this.get("destToken");
    return value.toString();
  }

  set destToken(value: string) {
    this.set("destToken", Value.fromString(value));
  }

  get srcCaller(): string {
    let value = this.get("srcCaller");
    return value.toString();
  }

  set srcCaller(value: string) {
    this.set("srcCaller", Value.fromString(value));
  }

  get destCaller(): string {
    let value = this.get("destCaller");
    return value.toString();
  }

  set destCaller(value: string) {
    this.set("destCaller", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BridgeTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BridgeTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BridgeTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BridgeTransfer", id.toString(), this);
  }

  static load(id: string): BridgeTransfer | null {
    return store.get("BridgeTransfer", id) as BridgeTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}
