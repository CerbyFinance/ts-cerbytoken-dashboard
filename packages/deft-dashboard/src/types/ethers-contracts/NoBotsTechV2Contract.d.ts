/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NoBotsTechV2ContractInterface extends ethers.utils.Interface {
  functions: {
    "ROLE_ADMIN()": FunctionFragment;
    "batchBurnAndReward()": FunctionFragment;
    "botTaxPercent()": FunctionFragment;
    "buyLimitAmount()": FunctionFragment;
    "buyLimitPercent()": FunctionFragment;
    "buyTimestampStorage(address)": FunctionFragment;
    "cachedMultiplier()": FunctionFragment;
    "chargeCustomTax(uint256,uint256)": FunctionFragment;
    "cycleOneEnds()": FunctionFragment;
    "cycleOneStartTaxPercent()": FunctionFragment;
    "cycleThreeEndTaxPercent()": FunctionFragment;
    "cycleThreeEnds()": FunctionFragment;
    "cycleThreeStartTaxPercent()": FunctionFragment;
    "cycleTwoEnds()": FunctionFragment;
    "cycleTwoStartTaxPercent()": FunctionFragment;
    "defiFactoryTokenAddress()": FunctionFragment;
    "earlyInvestorTimestamp()": FunctionFragment;
    "getBalance(address,uint256)": FunctionFragment;
    "getRealBalance(address,uint256)": FunctionFragment;
    "getRewardsBalance()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getTotalSupply()": FunctionFragment;
    "getWalletCurrentCycle(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "grantRolesBulk(tuple[])": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "howManyFirstMinutesIncreasedTax()": FunctionFragment;
    "lastCachedTimestamp()": FunctionFragment;
    "prepareHumanAddressMintOrBurnRewardsAmounts(bool,address,uint256)": FunctionFragment;
    "prepareTaxAmounts(tuple)": FunctionFragment;
    "publicForcedUpdateCacheMultiplier()": FunctionFragment;
    "realTotalSupply()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardsBalance()": FunctionFragment;
    "secondsBetweenRecacheUpdates()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateBotTaxSettings(uint256,uint256)": FunctionFragment;
    "updateBuyLimitPercent(uint256)": FunctionFragment;
    "updateCycleOneSettings(uint256,uint256)": FunctionFragment;
    "updateCycleTwoSettings(uint256,uint256)": FunctionFragment;
    "updateDefiFactoryTokenAddress(address)": FunctionFragment;
    "updateSecondsBetweenUpdates(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ROLE_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchBurnAndReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "botTaxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyLimitAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyLimitPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTimestampStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cachedMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chargeCustomTax",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cycleOneEnds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cycleOneStartTaxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cycleThreeEndTaxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cycleThreeEnds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cycleThreeStartTaxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cycleTwoEnds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cycleTwoStartTaxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defiFactoryTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlyInvestorTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletCurrentCycle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRolesBulk",
    values: [{ role: BytesLike; addr: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "howManyFirstMinutesIncreasedTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastCachedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prepareHumanAddressMintOrBurnRewardsAmounts",
    values: [boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareTaxAmounts",
    values: [
      {
        sender: string;
        recipient: string;
        transferAmount: BigNumberish;
        senderRealBalance: BigNumberish;
        recipientRealBalance: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publicForcedUpdateCacheMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "realTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondsBetweenRecacheUpdates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBotTaxSettings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBuyLimitPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCycleOneSettings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCycleTwoSettings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDefiFactoryTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSecondsBetweenUpdates",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ROLE_ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchBurnAndReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "botTaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyLimitAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyLimitPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTimestampStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cachedMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chargeCustomTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleOneEnds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleOneStartTaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleThreeEndTaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleThreeEnds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleThreeStartTaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleTwoEnds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleTwoStartTaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defiFactoryTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyInvestorTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRealBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletCurrentCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantRolesBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "howManyFirstMinutesIncreasedTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCachedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareHumanAddressMintOrBurnRewardsAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareTaxAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicForcedUpdateCacheMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondsBetweenRecacheUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBotTaxSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBuyLimitPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCycleOneSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCycleTwoSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDefiFactoryTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSecondsBetweenUpdates",
    data: BytesLike
  ): Result;

  events: {
    "BotTransactionDetected(address,address,uint256,uint256)": EventFragment;
    "BuyLimitAmountUpdated(uint256)": EventFragment;
    "MultiplierUpdated(uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TeamTaxRewardsUpdated(address,uint256)": EventFragment;
    "WalletBuyTimestampUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BotTransactionDetected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyLimitAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultiplierUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeamTaxRewardsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletBuyTimestampUpdated"): EventFragment;
}

export class NoBotsTechV2Contract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NoBotsTechV2ContractInterface;

  functions: {
    ROLE_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_ADMIN()"(overrides?: CallOverrides): Promise<[string]>;

    batchBurnAndReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "batchBurnAndReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    botTaxPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "botTaxPercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyLimitAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "buyLimitAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyLimitPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "buyLimitPercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTimestampStorage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "buyTimestampStorage(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cachedMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cachedMultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    chargeCustomTax(
      taxAmount: BigNumberish,
      accountBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "chargeCustomTax(uint256,uint256)"(
      taxAmount: BigNumberish,
      accountBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cycleOneEnds(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cycleOneEnds()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleOneStartTaxPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cycleOneStartTaxPercent()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cycleThreeEndTaxPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cycleThreeEndTaxPercent()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cycleThreeEnds(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cycleThreeEnds()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleThreeStartTaxPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cycleThreeStartTaxPercent()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cycleTwoEnds(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cycleTwoEnds()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleTwoStartTaxPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cycleTwoStartTaxPercent()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    defiFactoryTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "defiFactoryTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    earlyInvestorTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "earlyInvestorTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalance(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBalance(address,uint256)"(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRealBalance(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRealBalance(address,uint256)"(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardsBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRewardsBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWalletCurrentCycle(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          currentCycleTax: BigNumber;
          howMuchTimeLeftTillEndOfCycleThree: BigNumber;
        }
      ] & {
        currentCycle: [BigNumber, BigNumber] & {
          currentCycleTax: BigNumber;
          howMuchTimeLeftTillEndOfCycleThree: BigNumber;
        };
      }
    >;

    "getWalletCurrentCycle(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          currentCycleTax: BigNumber;
          howMuchTimeLeftTillEndOfCycleThree: BigNumber;
        }
      ] & {
        currentCycle: [BigNumber, BigNumber] & {
          currentCycleTax: BigNumber;
          howMuchTimeLeftTillEndOfCycleThree: BigNumber;
        };
      }
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRolesBulk(
      roles: { role: BytesLike; addr: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grantRolesBulk(tuple[])"(
      roles: { role: BytesLike; addr: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    howManyFirstMinutesIncreasedTax(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "howManyFirstMinutesIncreasedTax()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastCachedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastCachedTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    prepareHumanAddressMintOrBurnRewardsAmounts(
      isMint: boolean,
      account: string,
      desiredAmountToMintOrBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "prepareHumanAddressMintOrBurnRewardsAmounts(bool,address,uint256)"(
      isMint: boolean,
      account: string,
      desiredAmountToMintOrBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    prepareTaxAmounts(
      taxAmountsInput: {
        sender: string;
        recipient: string;
        transferAmount: BigNumberish;
        senderRealBalance: BigNumberish;
        recipientRealBalance: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "prepareTaxAmounts((address,address,uint256,uint256,uint256))"(
      taxAmountsInput: {
        sender: string;
        recipient: string;
        transferAmount: BigNumberish;
        senderRealBalance: BigNumberish;
        recipientRealBalance: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publicForcedUpdateCacheMultiplier(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "publicForcedUpdateCacheMultiplier()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    realTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "realTotalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardsBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    secondsBetweenRecacheUpdates(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "secondsBetweenRecacheUpdates()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateBotTaxSettings(
      _botTaxPercent: BigNumberish,
      _howManyFirstMinutesIncreasedTax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateBotTaxSettings(uint256,uint256)"(
      _botTaxPercent: BigNumberish,
      _howManyFirstMinutesIncreasedTax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBuyLimitPercent(
      _buyLimitPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateBuyLimitPercent(uint256)"(
      _buyLimitPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCycleOneSettings(
      _cycleOneStartTaxPercent: BigNumberish,
      _cycleOneEnds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateCycleOneSettings(uint256,uint256)"(
      _cycleOneStartTaxPercent: BigNumberish,
      _cycleOneEnds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateCycleTwoSettings(uint256,uint256)"(
      _cycleTwoStartTaxPercent: BigNumberish,
      _cycleTwoEnds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateCycleTwoSettings(uint256,uint256,uint256)"(
      _cycleThreeStartTaxPercent: BigNumberish,
      _cycleThreeEnds: BigNumberish,
      _cycleThreeEndTaxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDefiFactoryTokenAddress(
      _defiFactoryTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateDefiFactoryTokenAddress(address)"(
      _defiFactoryTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSecondsBetweenUpdates(
      _secondsBetweenRecacheUpdates: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateSecondsBetweenUpdates(uint256)"(
      _secondsBetweenRecacheUpdates: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ROLE_ADMIN(overrides?: CallOverrides): Promise<string>;

  "ROLE_ADMIN()"(overrides?: CallOverrides): Promise<string>;

  batchBurnAndReward(overrides?: CallOverrides): Promise<BigNumber>;

  "batchBurnAndReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  botTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "botTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  buyLimitAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "buyLimitAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  buyLimitPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "buyLimitPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  buyTimestampStorage(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "buyTimestampStorage(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cachedMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "cachedMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  chargeCustomTax(
    taxAmount: BigNumberish,
    accountBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "chargeCustomTax(uint256,uint256)"(
    taxAmount: BigNumberish,
    accountBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cycleOneEnds(overrides?: CallOverrides): Promise<BigNumber>;

  "cycleOneEnds()"(overrides?: CallOverrides): Promise<BigNumber>;

  cycleOneStartTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "cycleOneStartTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  cycleThreeEndTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "cycleThreeEndTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  cycleThreeEnds(overrides?: CallOverrides): Promise<BigNumber>;

  "cycleThreeEnds()"(overrides?: CallOverrides): Promise<BigNumber>;

  cycleThreeStartTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "cycleThreeStartTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  cycleTwoEnds(overrides?: CallOverrides): Promise<BigNumber>;

  "cycleTwoEnds()"(overrides?: CallOverrides): Promise<BigNumber>;

  cycleTwoStartTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "cycleTwoStartTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  defiFactoryTokenAddress(overrides?: CallOverrides): Promise<string>;

  "defiFactoryTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  earlyInvestorTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "earlyInvestorTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBalance(
    account: string,
    accountBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBalance(address,uint256)"(
    account: string,
    accountBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRealBalance(
    account: string,
    accountBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRealBalance(address,uint256)"(
    account: string,
    accountBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardsBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getRewardsBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  getWalletCurrentCycle(
    addr: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      currentCycleTax: BigNumber;
      howMuchTimeLeftTillEndOfCycleThree: BigNumber;
    }
  >;

  "getWalletCurrentCycle(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      currentCycleTax: BigNumber;
      howMuchTimeLeftTillEndOfCycleThree: BigNumber;
    }
  >;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRolesBulk(
    roles: { role: BytesLike; addr: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grantRolesBulk(tuple[])"(
    roles: { role: BytesLike; addr: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  howManyFirstMinutesIncreasedTax(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "howManyFirstMinutesIncreasedTax()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastCachedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "lastCachedTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  prepareHumanAddressMintOrBurnRewardsAmounts(
    isMint: boolean,
    account: string,
    desiredAmountToMintOrBurn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "prepareHumanAddressMintOrBurnRewardsAmounts(bool,address,uint256)"(
    isMint: boolean,
    account: string,
    desiredAmountToMintOrBurn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  prepareTaxAmounts(
    taxAmountsInput: {
      sender: string;
      recipient: string;
      transferAmount: BigNumberish;
      senderRealBalance: BigNumberish;
      recipientRealBalance: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "prepareTaxAmounts((address,address,uint256,uint256,uint256))"(
    taxAmountsInput: {
      sender: string;
      recipient: string;
      transferAmount: BigNumberish;
      senderRealBalance: BigNumberish;
      recipientRealBalance: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publicForcedUpdateCacheMultiplier(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "publicForcedUpdateCacheMultiplier()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  realTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "realTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  secondsBetweenRecacheUpdates(overrides?: CallOverrides): Promise<BigNumber>;

  "secondsBetweenRecacheUpdates()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateBotTaxSettings(
    _botTaxPercent: BigNumberish,
    _howManyFirstMinutesIncreasedTax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateBotTaxSettings(uint256,uint256)"(
    _botTaxPercent: BigNumberish,
    _howManyFirstMinutesIncreasedTax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBuyLimitPercent(
    _buyLimitPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateBuyLimitPercent(uint256)"(
    _buyLimitPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCycleOneSettings(
    _cycleOneStartTaxPercent: BigNumberish,
    _cycleOneEnds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateCycleOneSettings(uint256,uint256)"(
    _cycleOneStartTaxPercent: BigNumberish,
    _cycleOneEnds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateCycleTwoSettings(uint256,uint256)"(
    _cycleTwoStartTaxPercent: BigNumberish,
    _cycleTwoEnds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateCycleTwoSettings(uint256,uint256,uint256)"(
    _cycleThreeStartTaxPercent: BigNumberish,
    _cycleThreeEnds: BigNumberish,
    _cycleThreeEndTaxPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDefiFactoryTokenAddress(
    _defiFactoryTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateDefiFactoryTokenAddress(address)"(
    _defiFactoryTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSecondsBetweenUpdates(
    _secondsBetweenRecacheUpdates: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateSecondsBetweenUpdates(uint256)"(
    _secondsBetweenRecacheUpdates: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ROLE_ADMIN(overrides?: CallOverrides): Promise<string>;

    "ROLE_ADMIN()"(overrides?: CallOverrides): Promise<string>;

    batchBurnAndReward(overrides?: CallOverrides): Promise<BigNumber>;

    "batchBurnAndReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    botTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "botTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyLimitAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "buyLimitAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyLimitPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "buyLimitPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyTimestampStorage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyTimestampStorage(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cachedMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "cachedMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    chargeCustomTax(
      taxAmount: BigNumberish,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "chargeCustomTax(uint256,uint256)"(
      taxAmount: BigNumberish,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycleOneEnds(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleOneEnds()"(overrides?: CallOverrides): Promise<BigNumber>;

    cycleOneStartTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleOneStartTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    cycleThreeEndTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleThreeEndTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    cycleThreeEnds(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleThreeEnds()"(overrides?: CallOverrides): Promise<BigNumber>;

    cycleThreeStartTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleThreeStartTaxPercent()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycleTwoEnds(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleTwoEnds()"(overrides?: CallOverrides): Promise<BigNumber>;

    cycleTwoStartTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleTwoStartTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    defiFactoryTokenAddress(overrides?: CallOverrides): Promise<string>;

    "defiFactoryTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    earlyInvestorTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "earlyInvestorTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBalance(address,uint256)"(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealBalance(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealBalance(address,uint256)"(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardsBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWalletCurrentCycle(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentCycleTax: BigNumber;
        howMuchTimeLeftTillEndOfCycleThree: BigNumber;
      }
    >;

    "getWalletCurrentCycle(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentCycleTax: BigNumber;
        howMuchTimeLeftTillEndOfCycleThree: BigNumber;
      }
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRolesBulk(
      roles: { role: BytesLike; addr: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRolesBulk(tuple[])"(
      roles: { role: BytesLike; addr: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    howManyFirstMinutesIncreasedTax(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "howManyFirstMinutesIncreasedTax()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastCachedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCachedTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    prepareHumanAddressMintOrBurnRewardsAmounts(
      isMint: boolean,
      account: string,
      desiredAmountToMintOrBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prepareHumanAddressMintOrBurnRewardsAmounts(bool,address,uint256)"(
      isMint: boolean,
      account: string,
      desiredAmountToMintOrBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareTaxAmounts(
      taxAmountsInput: {
        sender: string;
        recipient: string;
        transferAmount: BigNumberish;
        senderRealBalance: BigNumberish;
        recipientRealBalance: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        senderRealBalance: BigNumber;
        recipientRealBalance: BigNumber;
        burnAndRewardAmount: BigNumber;
        recipientGetsAmount: BigNumber;
      }
    >;

    "prepareTaxAmounts((address,address,uint256,uint256,uint256))"(
      taxAmountsInput: {
        sender: string;
        recipient: string;
        transferAmount: BigNumberish;
        senderRealBalance: BigNumberish;
        recipientRealBalance: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        senderRealBalance: BigNumber;
        recipientRealBalance: BigNumber;
        burnAndRewardAmount: BigNumber;
        recipientGetsAmount: BigNumber;
      }
    >;

    publicForcedUpdateCacheMultiplier(overrides?: CallOverrides): Promise<void>;

    "publicForcedUpdateCacheMultiplier()"(
      overrides?: CallOverrides
    ): Promise<void>;

    realTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "realTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardsBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    secondsBetweenRecacheUpdates(overrides?: CallOverrides): Promise<BigNumber>;

    "secondsBetweenRecacheUpdates()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateBotTaxSettings(
      _botTaxPercent: BigNumberish,
      _howManyFirstMinutesIncreasedTax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBotTaxSettings(uint256,uint256)"(
      _botTaxPercent: BigNumberish,
      _howManyFirstMinutesIncreasedTax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBuyLimitPercent(
      _buyLimitPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBuyLimitPercent(uint256)"(
      _buyLimitPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCycleOneSettings(
      _cycleOneStartTaxPercent: BigNumberish,
      _cycleOneEnds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCycleOneSettings(uint256,uint256)"(
      _cycleOneStartTaxPercent: BigNumberish,
      _cycleOneEnds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCycleTwoSettings(uint256,uint256)"(
      _cycleTwoStartTaxPercent: BigNumberish,
      _cycleTwoEnds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCycleTwoSettings(uint256,uint256,uint256)"(
      _cycleThreeStartTaxPercent: BigNumberish,
      _cycleThreeEnds: BigNumberish,
      _cycleThreeEndTaxPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDefiFactoryTokenAddress(
      _defiFactoryTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateDefiFactoryTokenAddress(address)"(
      _defiFactoryTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSecondsBetweenUpdates(
      _secondsBetweenRecacheUpdates: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSecondsBetweenUpdates(uint256)"(
      _secondsBetweenRecacheUpdates: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BotTransactionDetected(
      from: null,
      to: null,
      transferAmount: null,
      taxedAmount: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        from: string;
        to: string;
        transferAmount: BigNumber;
        taxedAmount: BigNumber;
      }
    >;

    BuyLimitAmountUpdated(
      newBuyLimitAmount: null
    ): TypedEventFilter<[BigNumber], { newBuyLimitAmount: BigNumber }>;

    MultiplierUpdated(
      newMultiplier: null
    ): TypedEventFilter<[BigNumber], { newMultiplier: BigNumber }>;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    TeamTaxRewardsUpdated(
      teamAddress: null,
      teamRewards: null
    ): TypedEventFilter<
      [string, BigNumber],
      { teamAddress: string; teamRewards: BigNumber }
    >;

    WalletBuyTimestampUpdated(
      wallet: null,
      buyTimestamp: null
    ): TypedEventFilter<
      [string, BigNumber],
      { wallet: string; buyTimestamp: BigNumber }
    >;
  };

  estimateGas: {
    ROLE_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_ADMIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    batchBurnAndReward(overrides?: CallOverrides): Promise<BigNumber>;

    "batchBurnAndReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    botTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "botTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyLimitAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "buyLimitAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyLimitPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "buyLimitPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyTimestampStorage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyTimestampStorage(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cachedMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "cachedMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    chargeCustomTax(
      taxAmount: BigNumberish,
      accountBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "chargeCustomTax(uint256,uint256)"(
      taxAmount: BigNumberish,
      accountBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cycleOneEnds(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleOneEnds()"(overrides?: CallOverrides): Promise<BigNumber>;

    cycleOneStartTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleOneStartTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    cycleThreeEndTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleThreeEndTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    cycleThreeEnds(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleThreeEnds()"(overrides?: CallOverrides): Promise<BigNumber>;

    cycleThreeStartTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleThreeStartTaxPercent()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycleTwoEnds(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleTwoEnds()"(overrides?: CallOverrides): Promise<BigNumber>;

    cycleTwoStartTaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "cycleTwoStartTaxPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    defiFactoryTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "defiFactoryTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    earlyInvestorTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "earlyInvestorTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBalance(address,uint256)"(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealBalance(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealBalance(address,uint256)"(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardsBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWalletCurrentCycle(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWalletCurrentCycle(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRolesBulk(
      roles: { role: BytesLike; addr: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grantRolesBulk(tuple[])"(
      roles: { role: BytesLike; addr: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    howManyFirstMinutesIncreasedTax(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "howManyFirstMinutesIncreasedTax()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastCachedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCachedTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    prepareHumanAddressMintOrBurnRewardsAmounts(
      isMint: boolean,
      account: string,
      desiredAmountToMintOrBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "prepareHumanAddressMintOrBurnRewardsAmounts(bool,address,uint256)"(
      isMint: boolean,
      account: string,
      desiredAmountToMintOrBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    prepareTaxAmounts(
      taxAmountsInput: {
        sender: string;
        recipient: string;
        transferAmount: BigNumberish;
        senderRealBalance: BigNumberish;
        recipientRealBalance: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "prepareTaxAmounts((address,address,uint256,uint256,uint256))"(
      taxAmountsInput: {
        sender: string;
        recipient: string;
        transferAmount: BigNumberish;
        senderRealBalance: BigNumberish;
        recipientRealBalance: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publicForcedUpdateCacheMultiplier(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "publicForcedUpdateCacheMultiplier()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    realTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "realTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    secondsBetweenRecacheUpdates(overrides?: CallOverrides): Promise<BigNumber>;

    "secondsBetweenRecacheUpdates()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateBotTaxSettings(
      _botTaxPercent: BigNumberish,
      _howManyFirstMinutesIncreasedTax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateBotTaxSettings(uint256,uint256)"(
      _botTaxPercent: BigNumberish,
      _howManyFirstMinutesIncreasedTax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBuyLimitPercent(
      _buyLimitPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateBuyLimitPercent(uint256)"(
      _buyLimitPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCycleOneSettings(
      _cycleOneStartTaxPercent: BigNumberish,
      _cycleOneEnds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateCycleOneSettings(uint256,uint256)"(
      _cycleOneStartTaxPercent: BigNumberish,
      _cycleOneEnds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateCycleTwoSettings(uint256,uint256)"(
      _cycleTwoStartTaxPercent: BigNumberish,
      _cycleTwoEnds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateCycleTwoSettings(uint256,uint256,uint256)"(
      _cycleThreeStartTaxPercent: BigNumberish,
      _cycleThreeEnds: BigNumberish,
      _cycleThreeEndTaxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDefiFactoryTokenAddress(
      _defiFactoryTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateDefiFactoryTokenAddress(address)"(
      _defiFactoryTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSecondsBetweenUpdates(
      _secondsBetweenRecacheUpdates: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateSecondsBetweenUpdates(uint256)"(
      _secondsBetweenRecacheUpdates: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ROLE_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROLE_ADMIN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchBurnAndReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "batchBurnAndReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    botTaxPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "botTaxPercent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyLimitAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyLimitAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyLimitPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyLimitPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTimestampStorage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buyTimestampStorage(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cachedMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cachedMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chargeCustomTax(
      taxAmount: BigNumberish,
      accountBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "chargeCustomTax(uint256,uint256)"(
      taxAmount: BigNumberish,
      accountBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cycleOneEnds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cycleOneEnds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleOneStartTaxPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cycleOneStartTaxPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycleThreeEndTaxPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cycleThreeEndTaxPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycleThreeEnds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cycleThreeEnds()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycleThreeStartTaxPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cycleThreeStartTaxPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycleTwoEnds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cycleTwoEnds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleTwoStartTaxPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cycleTwoStartTaxPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defiFactoryTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "defiFactoryTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earlyInvestorTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earlyInvestorTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalance(address,uint256)"(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealBalance(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRealBalance(address,uint256)"(
      account: string,
      accountBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRewardsBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWalletCurrentCycle(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWalletCurrentCycle(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRolesBulk(
      roles: { role: BytesLike; addr: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grantRolesBulk(tuple[])"(
      roles: { role: BytesLike; addr: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    howManyFirstMinutesIncreasedTax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "howManyFirstMinutesIncreasedTax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastCachedTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastCachedTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareHumanAddressMintOrBurnRewardsAmounts(
      isMint: boolean,
      account: string,
      desiredAmountToMintOrBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "prepareHumanAddressMintOrBurnRewardsAmounts(bool,address,uint256)"(
      isMint: boolean,
      account: string,
      desiredAmountToMintOrBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    prepareTaxAmounts(
      taxAmountsInput: {
        sender: string;
        recipient: string;
        transferAmount: BigNumberish;
        senderRealBalance: BigNumberish;
        recipientRealBalance: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "prepareTaxAmounts((address,address,uint256,uint256,uint256))"(
      taxAmountsInput: {
        sender: string;
        recipient: string;
        transferAmount: BigNumberish;
        senderRealBalance: BigNumberish;
        recipientRealBalance: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publicForcedUpdateCacheMultiplier(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "publicForcedUpdateCacheMultiplier()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    realTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "realTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secondsBetweenRecacheUpdates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "secondsBetweenRecacheUpdates()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateBotTaxSettings(
      _botTaxPercent: BigNumberish,
      _howManyFirstMinutesIncreasedTax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateBotTaxSettings(uint256,uint256)"(
      _botTaxPercent: BigNumberish,
      _howManyFirstMinutesIncreasedTax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBuyLimitPercent(
      _buyLimitPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateBuyLimitPercent(uint256)"(
      _buyLimitPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCycleOneSettings(
      _cycleOneStartTaxPercent: BigNumberish,
      _cycleOneEnds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateCycleOneSettings(uint256,uint256)"(
      _cycleOneStartTaxPercent: BigNumberish,
      _cycleOneEnds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateCycleTwoSettings(uint256,uint256)"(
      _cycleTwoStartTaxPercent: BigNumberish,
      _cycleTwoEnds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateCycleTwoSettings(uint256,uint256,uint256)"(
      _cycleThreeStartTaxPercent: BigNumberish,
      _cycleThreeEnds: BigNumberish,
      _cycleThreeEndTaxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDefiFactoryTokenAddress(
      _defiFactoryTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateDefiFactoryTokenAddress(address)"(
      _defiFactoryTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSecondsBetweenUpdates(
      _secondsBetweenRecacheUpdates: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateSecondsBetweenUpdates(uint256)"(
      _secondsBetweenRecacheUpdates: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
