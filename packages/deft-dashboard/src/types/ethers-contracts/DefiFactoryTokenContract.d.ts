/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DefiFactoryTokenContractInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "ROLE_ADMIN()": FunctionFragment;
    "ROLE_ALLOWED_TO_SEND_WHILE_PAUSED()": FunctionFragment;
    "ROLE_BURNER()": FunctionFragment;
    "ROLE_MINTER()": FunctionFragment;
    "ROLE_TAXER()": FunctionFragment;
    "ROLE_TRANSFERER()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burnHumanAddress(address,uint256)": FunctionFragment;
    "chargeCustomTax(address,uint256)": FunctionFragment;
    "claimReferrerRewards(address[])": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "filterNonZeroReferrals(address[])": FunctionFragment;
    "getCachedReferrerRewards(address)": FunctionFragment;
    "getCalculatedReferrerRewards(address,address[])": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getTemporaryReferralRealAmountsBulk(address[])": FunctionFragment;
    "getUtilsContractAtPos(uint256)": FunctionFragment;
    "getUtilsContractsCount()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isPaused()": FunctionFragment;
    "mintHumanAddress(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "pauseContract()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "registerReferral(address)": FunctionFragment;
    "registerReferralsBulk(tuple[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "resumeContract()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferCustom(address,address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferFromTeamVestingContract(address,uint256)": FunctionFragment;
    "updateNameAndSymbol(string,string)": FunctionFragment;
    "updateUtilsContracts(tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ALLOWED_TO_SEND_WHILE_PAUSED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_BURNER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_MINTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_TAXER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_TRANSFERER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnHumanAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chargeCustomTax",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReferrerRewards",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "filterNonZeroReferrals",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCachedReferrerRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCalculatedReferrerRewards",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTemporaryReferralRealAmountsBulk",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilsContractAtPos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilsContractsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintHumanAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pauseContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerReferral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerReferralsBulk",
    values: [{ referral: string; referrer: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCustom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromTeamVestingContract",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNameAndSymbol",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUtilsContracts",
    values: [
      {
        isMinter: boolean;
        isBurner: boolean;
        isTransferer: boolean;
        isAllowedToSend: boolean;
        isTaxer: boolean;
        addr: string;
      }[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ALLOWED_TO_SEND_WHILE_PAUSED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_BURNER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_MINTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_TAXER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_TRANSFERER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnHumanAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chargeCustomTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReferrerRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filterNonZeroReferrals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCachedReferrerRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCalculatedReferrerRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTemporaryReferralRealAmountsBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilsContractAtPos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilsContractsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintHumanAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerReferralsBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferCustom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromTeamVestingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNameAndSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUtilsContracts",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BurnHumanAddress(address,uint256)": EventFragment;
    "ClaimedReferralRewards(address,uint256)": EventFragment;
    "MintHumanAddress(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferCustom(address,address,uint256)": EventFragment;
    "UpdatedUtilsContracts(tuple[])": EventFragment;
    "VestedAmountClaimed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnHumanAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedReferralRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintHumanAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferCustom"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedUtilsContracts"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestedAmountClaimed"): EventFragment;
}

export class DefiFactoryTokenContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DefiFactoryTokenContractInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    ROLE_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_ADMIN()"(overrides?: CallOverrides): Promise<[string]>;

    ROLE_ALLOWED_TO_SEND_WHILE_PAUSED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ROLE_ALLOWED_TO_SEND_WHILE_PAUSED()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    ROLE_BURNER(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_BURNER()"(overrides?: CallOverrides): Promise<[string]>;

    ROLE_MINTER(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_MINTER()"(overrides?: CallOverrides): Promise<[string]>;

    ROLE_TAXER(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_TAXER()"(overrides?: CallOverrides): Promise<[string]>;

    ROLE_TRANSFERER(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_TRANSFERER()"(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burnHumanAddress(
      from: string,
      desiredAmountToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnHumanAddress(address,uint256)"(
      from: string,
      desiredAmountToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chargeCustomTax(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "chargeCustomTax(address,uint256)"(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReferrerRewards(
      referrals: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimReferrerRewards(address[])"(
      referrals: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    filterNonZeroReferrals(
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "filterNonZeroReferrals(address[])"(
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getCachedReferrerRewards(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getCachedReferrerRewards(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCalculatedReferrerRewards(
      addr: string,
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getCalculatedReferrerRewards(address,address[])"(
      addr: string,
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getChainId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTemporaryReferralRealAmountsBulk(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { addr: string; realBalance: BigNumber })[]]
    >;

    "getTemporaryReferralRealAmountsBulk(address[])"(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { addr: string; realBalance: BigNumber })[]]
    >;

    getUtilsContractAtPos(
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getUtilsContractAtPos(uint256)"(
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUtilsContractsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getUtilsContractsCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "isPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    mintHumanAddress(
      to: string,
      desiredAmountToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintHumanAddress(address,uint256)"(
      to: string,
      desiredAmountToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pauseContract()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerReferral(
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerReferral(address)"(
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerReferralsBulk(
      referrals: { referral: string; referrer: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerReferralsBulk(tuple[])"(
      referrals: { referral: string; referrer: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resumeContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "resumeContract()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferCustom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferCustom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFromTeamVestingContract(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFromTeamVestingContract(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateNameAndSymbol(
      __name: string,
      __symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateNameAndSymbol(string,string)"(
      __name: string,
      __symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUtilsContracts(
      accessSettings: {
        isMinter: boolean;
        isBurner: boolean;
        isTransferer: boolean;
        isAllowedToSend: boolean;
        isTaxer: boolean;
        addr: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateUtilsContracts(tuple[])"(
      accessSettings: {
        isMinter: boolean;
        isBurner: boolean;
        isTransferer: boolean;
        isAllowedToSend: boolean;
        isTaxer: boolean;
        addr: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  ROLE_ADMIN(overrides?: CallOverrides): Promise<string>;

  "ROLE_ADMIN()"(overrides?: CallOverrides): Promise<string>;

  ROLE_ALLOWED_TO_SEND_WHILE_PAUSED(overrides?: CallOverrides): Promise<string>;

  "ROLE_ALLOWED_TO_SEND_WHILE_PAUSED()"(
    overrides?: CallOverrides
  ): Promise<string>;

  ROLE_BURNER(overrides?: CallOverrides): Promise<string>;

  "ROLE_BURNER()"(overrides?: CallOverrides): Promise<string>;

  ROLE_MINTER(overrides?: CallOverrides): Promise<string>;

  "ROLE_MINTER()"(overrides?: CallOverrides): Promise<string>;

  ROLE_TAXER(overrides?: CallOverrides): Promise<string>;

  "ROLE_TAXER()"(overrides?: CallOverrides): Promise<string>;

  ROLE_TRANSFERER(overrides?: CallOverrides): Promise<string>;

  "ROLE_TRANSFERER()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnHumanAddress(
    from: string,
    desiredAmountToBurn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnHumanAddress(address,uint256)"(
    from: string,
    desiredAmountToBurn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chargeCustomTax(
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "chargeCustomTax(address,uint256)"(
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReferrerRewards(
    referrals: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimReferrerRewards(address[])"(
    referrals: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  filterNonZeroReferrals(
    referrals: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "filterNonZeroReferrals(address[])"(
    referrals: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getCachedReferrerRewards(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCachedReferrerRewards(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCalculatedReferrerRewards(
    addr: string,
    referrals: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCalculatedReferrerRewards(address,address[])"(
    addr: string,
    referrals: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  "getChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTemporaryReferralRealAmountsBulk(
    addrs: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber] & { addr: string; realBalance: BigNumber })[]
  >;

  "getTemporaryReferralRealAmountsBulk(address[])"(
    addrs: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber] & { addr: string; realBalance: BigNumber })[]
  >;

  getUtilsContractAtPos(
    pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getUtilsContractAtPos(uint256)"(
    pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getUtilsContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getUtilsContractsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  "isPaused()"(overrides?: CallOverrides): Promise<boolean>;

  mintHumanAddress(
    to: string,
    desiredAmountToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintHumanAddress(address,uint256)"(
    to: string,
    desiredAmountToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pauseContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pauseContract()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerReferral(
    referrer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerReferral(address)"(
    referrer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerReferralsBulk(
    referrals: { referral: string; referrer: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerReferralsBulk(tuple[])"(
    referrals: { referral: string; referrer: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resumeContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "resumeContract()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferCustom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferCustom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFromTeamVestingContract(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFromTeamVestingContract(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateNameAndSymbol(
    __name: string,
    __symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateNameAndSymbol(string,string)"(
    __name: string,
    __symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUtilsContracts(
    accessSettings: {
      isMinter: boolean;
      isBurner: boolean;
      isTransferer: boolean;
      isAllowedToSend: boolean;
      isTaxer: boolean;
      addr: string;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateUtilsContracts(tuple[])"(
    accessSettings: {
      isMinter: boolean;
      isBurner: boolean;
      isTransferer: boolean;
      isAllowedToSend: boolean;
      isTaxer: boolean;
      addr: string;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    ROLE_ADMIN(overrides?: CallOverrides): Promise<string>;

    "ROLE_ADMIN()"(overrides?: CallOverrides): Promise<string>;

    ROLE_ALLOWED_TO_SEND_WHILE_PAUSED(
      overrides?: CallOverrides
    ): Promise<string>;

    "ROLE_ALLOWED_TO_SEND_WHILE_PAUSED()"(
      overrides?: CallOverrides
    ): Promise<string>;

    ROLE_BURNER(overrides?: CallOverrides): Promise<string>;

    "ROLE_BURNER()"(overrides?: CallOverrides): Promise<string>;

    ROLE_MINTER(overrides?: CallOverrides): Promise<string>;

    "ROLE_MINTER()"(overrides?: CallOverrides): Promise<string>;

    ROLE_TAXER(overrides?: CallOverrides): Promise<string>;

    "ROLE_TAXER()"(overrides?: CallOverrides): Promise<string>;

    ROLE_TRANSFERER(overrides?: CallOverrides): Promise<string>;

    "ROLE_TRANSFERER()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnHumanAddress(
      from: string,
      desiredAmountToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnHumanAddress(address,uint256)"(
      from: string,
      desiredAmountToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chargeCustomTax(
      from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "chargeCustomTax(address,uint256)"(
      from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReferrerRewards(
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimReferrerRewards(address[])"(
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    filterNonZeroReferrals(
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "filterNonZeroReferrals(address[])"(
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getCachedReferrerRewards(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCachedReferrerRewards(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCalculatedReferrerRewards(
      addr: string,
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCalculatedReferrerRewards(address,address[])"(
      addr: string,
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTemporaryReferralRealAmountsBulk(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { addr: string; realBalance: BigNumber })[]
    >;

    "getTemporaryReferralRealAmountsBulk(address[])"(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { addr: string; realBalance: BigNumber })[]
    >;

    getUtilsContractAtPos(
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getUtilsContractAtPos(uint256)"(
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getUtilsContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getUtilsContractsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    "isPaused()"(overrides?: CallOverrides): Promise<boolean>;

    mintHumanAddress(
      to: string,
      desiredAmountToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintHumanAddress(address,uint256)"(
      to: string,
      desiredAmountToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseContract(overrides?: CallOverrides): Promise<void>;

    "pauseContract()"(overrides?: CallOverrides): Promise<void>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registerReferral(
      referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerReferral(address)"(
      referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerReferralsBulk(
      referrals: { referral: string; referrer: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "registerReferralsBulk(tuple[])"(
      referrals: { referral: string; referrer: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resumeContract(overrides?: CallOverrides): Promise<void>;

    "resumeContract()"(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferCustom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferCustom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFromTeamVestingContract(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFromTeamVestingContract(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNameAndSymbol(
      __name: string,
      __symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateNameAndSymbol(string,string)"(
      __name: string,
      __symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUtilsContracts(
      accessSettings: {
        isMinter: boolean;
        isBurner: boolean;
        isTransferer: boolean;
        isAllowedToSend: boolean;
        isTaxer: boolean;
        addr: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateUtilsContracts(tuple[])"(
      accessSettings: {
        isMinter: boolean;
        isBurner: boolean;
        isTransferer: boolean;
        isAllowedToSend: boolean;
        isTaxer: boolean;
        addr: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    BurnHumanAddress(
      sender: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    ClaimedReferralRewards(
      recipient: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient: string; amount: BigNumber }
    >;

    MintHumanAddress(
      recipient: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient: string; amount: BigNumber }
    >;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    TransferCustom(
      sender: null,
      recipient: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; recipient: string; amount: BigNumber }
    >;

    UpdatedUtilsContracts(
      accessSettings: null
    ): TypedEventFilter<
      [
        ([boolean, boolean, boolean, boolean, boolean, string] & {
          isMinter: boolean;
          isBurner: boolean;
          isTransferer: boolean;
          isAllowedToSend: boolean;
          isTaxer: boolean;
          addr: string;
        })[]
      ],
      {
        accessSettings: ([
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          string
        ] & {
          isMinter: boolean;
          isBurner: boolean;
          isTransferer: boolean;
          isAllowedToSend: boolean;
          isTaxer: boolean;
          addr: string;
        })[];
      }
    >;

    VestedAmountClaimed(
      recipient: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_ADMIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_ALLOWED_TO_SEND_WHILE_PAUSED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ROLE_ALLOWED_TO_SEND_WHILE_PAUSED()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ROLE_BURNER(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_BURNER()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_MINTER(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_MINTER()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_TAXER(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_TAXER()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_TRANSFERER(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_TRANSFERER()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnHumanAddress(
      from: string,
      desiredAmountToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnHumanAddress(address,uint256)"(
      from: string,
      desiredAmountToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chargeCustomTax(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "chargeCustomTax(address,uint256)"(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReferrerRewards(
      referrals: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimReferrerRewards(address[])"(
      referrals: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    filterNonZeroReferrals(
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "filterNonZeroReferrals(address[])"(
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCachedReferrerRewards(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCachedReferrerRewards(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCalculatedReferrerRewards(
      addr: string,
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCalculatedReferrerRewards(address,address[])"(
      addr: string,
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTemporaryReferralRealAmountsBulk(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTemporaryReferralRealAmountsBulk(address[])"(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilsContractAtPos(
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUtilsContractAtPos(uint256)"(
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilsContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getUtilsContractsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "isPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintHumanAddress(
      to: string,
      desiredAmountToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintHumanAddress(address,uint256)"(
      to: string,
      desiredAmountToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pauseContract()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerReferral(
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerReferral(address)"(
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerReferralsBulk(
      referrals: { referral: string; referrer: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerReferralsBulk(tuple[])"(
      referrals: { referral: string; referrer: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resumeContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "resumeContract()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferCustom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferCustom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFromTeamVestingContract(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFromTeamVestingContract(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateNameAndSymbol(
      __name: string,
      __symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateNameAndSymbol(string,string)"(
      __name: string,
      __symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUtilsContracts(
      accessSettings: {
        isMinter: boolean;
        isBurner: boolean;
        isTransferer: boolean;
        isAllowedToSend: boolean;
        isTaxer: boolean;
        addr: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateUtilsContracts(tuple[])"(
      accessSettings: {
        isMinter: boolean;
        isBurner: boolean;
        isTransferer: boolean;
        isAllowedToSend: boolean;
        isTaxer: boolean;
        addr: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROLE_ADMIN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_ALLOWED_TO_SEND_WHILE_PAUSED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_ALLOWED_TO_SEND_WHILE_PAUSED()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_BURNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROLE_BURNER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_MINTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROLE_MINTER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_TAXER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROLE_TAXER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_TRANSFERER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROLE_TRANSFERER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnHumanAddress(
      from: string,
      desiredAmountToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnHumanAddress(address,uint256)"(
      from: string,
      desiredAmountToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chargeCustomTax(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "chargeCustomTax(address,uint256)"(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReferrerRewards(
      referrals: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimReferrerRewards(address[])"(
      referrals: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    filterNonZeroReferrals(
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "filterNonZeroReferrals(address[])"(
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCachedReferrerRewards(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCachedReferrerRewards(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCalculatedReferrerRewards(
      addr: string,
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCalculatedReferrerRewards(address,address[])"(
      addr: string,
      referrals: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getChainId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTemporaryReferralRealAmountsBulk(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTemporaryReferralRealAmountsBulk(address[])"(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUtilsContractAtPos(
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUtilsContractAtPos(uint256)"(
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUtilsContractsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUtilsContractsCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPaused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintHumanAddress(
      to: string,
      desiredAmountToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintHumanAddress(address,uint256)"(
      to: string,
      desiredAmountToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pauseContract()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerReferral(
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerReferral(address)"(
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerReferralsBulk(
      referrals: { referral: string; referrer: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerReferralsBulk(tuple[])"(
      referrals: { referral: string; referrer: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resumeContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "resumeContract()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferCustom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferCustom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFromTeamVestingContract(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFromTeamVestingContract(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateNameAndSymbol(
      __name: string,
      __symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateNameAndSymbol(string,string)"(
      __name: string,
      __symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUtilsContracts(
      accessSettings: {
        isMinter: boolean;
        isBurner: boolean;
        isTransferer: boolean;
        isAllowedToSend: boolean;
        isTaxer: boolean;
        addr: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateUtilsContracts(tuple[])"(
      accessSettings: {
        isMinter: boolean;
        isBurner: boolean;
        isTransferer: boolean;
        isAllowedToSend: boolean;
        isTaxer: boolean;
        addr: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
