/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BulkMarkedAsBot = ContractEventLog<{
  addrs: string[];
  0: string[];
}>;
export type MarkedAsBot = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type MarkedAsDeftEthPair = ContractEventLog<{
  addr: string;
  value: boolean;
  0: string;
  1: boolean;
}>;
export type MarkedAsExcludedFromBalance = ContractEventLog<{
  addr: string;
  value: boolean;
  0: string;
  1: boolean;
}>;
export type MarkedAsHuman = ContractEventLog<{
  addr: string;
  value: boolean;
  0: string;
  1: boolean;
}>;
export type MarkedAsNotBot = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;

export interface DeftStorageContract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DeftStorageContract;
  clone(): DeftStorageContract;
  methods: {
    ROLE_ADMIN(): NonPayableTransactionObject<string>;

    bulkMarkAddressAsBot(addrs: string[]): NonPayableTransactionObject<void>;

    getBuyTimestamp(
      tokenAddr: string,
      addr: string
    ): NonPayableTransactionObject<string>;

    getCooldownPeriods(tokenAddr: string): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getHowManyLeadingZerosToBlock(): NonPayableTransactionObject<string>;

    getReceivedAtTimestamp(
      tokenAddr: string,
      addr: string
    ): NonPayableTransactionObject<string>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getRoleMember(
      role: string | number[],
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    getRoleMemberCount(
      role: string | number[]
    ): NonPayableTransactionObject<string>;

    getSentAtTimestamp(
      tokenAddr: string,
      addr: string
    ): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    grantRolesBulk(
      roles: [string | number[], string][]
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    isBotAddress(addr: string): NonPayableTransactionObject<boolean>;

    isExcludedFromBalance(addr: string): NonPayableTransactionObject<boolean>;

    isHumanTransaction(
      tokenAddr: string,
      sender: string,
      recipient: string
    ): NonPayableTransactionObject<[boolean, boolean, boolean]>;

    isMarkedAsBotStorage(addr: string): NonPayableTransactionObject<boolean>;

    isMarkedAsBotStorageBulk(
      addrs: string[]
    ): NonPayableTransactionObject<string[]>;

    isMarkedAsDeftEthPair(addr: string): NonPayableTransactionObject<boolean>;

    isMarkedAsHumanStorage(addr: string): NonPayableTransactionObject<boolean>;

    isMarkedAsHumanStorageBulk(
      addrs: string[]
    ): NonPayableTransactionObject<string[]>;

    markAddressAsBot(addr: string): NonPayableTransactionObject<void>;

    markAddressAsExcludedFromBalance(
      addr: string,
      value: boolean
    ): NonPayableTransactionObject<void>;

    markAddressAsHuman(
      addr: string,
      value: boolean
    ): NonPayableTransactionObject<void>;

    markAddressAsNotBot(addr: string): NonPayableTransactionObject<void>;

    markPairAsDeftEthPair(
      addr: string,
      value: boolean
    ): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    updateBuyTimestamp(
      tokenAddr: string,
      addr: string,
      newBuyTimestamp: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateCooldownPeriod(
      tokenAddr: string,
      newCooldownBuyPeriod: number | string | BN,
      newCooldownSellPeriod: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateHowManyLeadingZerosToBlock(
      newHowManyLeadingZerosToBlock: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateTransaction(
      tokenAddr: string,
      sender: string,
      recipient: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    BulkMarkedAsBot(cb?: Callback<BulkMarkedAsBot>): EventEmitter;
    BulkMarkedAsBot(
      options?: EventOptions,
      cb?: Callback<BulkMarkedAsBot>
    ): EventEmitter;

    MarkedAsBot(cb?: Callback<MarkedAsBot>): EventEmitter;
    MarkedAsBot(
      options?: EventOptions,
      cb?: Callback<MarkedAsBot>
    ): EventEmitter;

    MarkedAsDeftEthPair(cb?: Callback<MarkedAsDeftEthPair>): EventEmitter;
    MarkedAsDeftEthPair(
      options?: EventOptions,
      cb?: Callback<MarkedAsDeftEthPair>
    ): EventEmitter;

    MarkedAsExcludedFromBalance(
      cb?: Callback<MarkedAsExcludedFromBalance>
    ): EventEmitter;
    MarkedAsExcludedFromBalance(
      options?: EventOptions,
      cb?: Callback<MarkedAsExcludedFromBalance>
    ): EventEmitter;

    MarkedAsHuman(cb?: Callback<MarkedAsHuman>): EventEmitter;
    MarkedAsHuman(
      options?: EventOptions,
      cb?: Callback<MarkedAsHuman>
    ): EventEmitter;

    MarkedAsNotBot(cb?: Callback<MarkedAsNotBot>): EventEmitter;
    MarkedAsNotBot(
      options?: EventOptions,
      cb?: Callback<MarkedAsNotBot>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "BulkMarkedAsBot", cb: Callback<BulkMarkedAsBot>): void;
  once(
    event: "BulkMarkedAsBot",
    options: EventOptions,
    cb: Callback<BulkMarkedAsBot>
  ): void;

  once(event: "MarkedAsBot", cb: Callback<MarkedAsBot>): void;
  once(
    event: "MarkedAsBot",
    options: EventOptions,
    cb: Callback<MarkedAsBot>
  ): void;

  once(event: "MarkedAsDeftEthPair", cb: Callback<MarkedAsDeftEthPair>): void;
  once(
    event: "MarkedAsDeftEthPair",
    options: EventOptions,
    cb: Callback<MarkedAsDeftEthPair>
  ): void;

  once(
    event: "MarkedAsExcludedFromBalance",
    cb: Callback<MarkedAsExcludedFromBalance>
  ): void;
  once(
    event: "MarkedAsExcludedFromBalance",
    options: EventOptions,
    cb: Callback<MarkedAsExcludedFromBalance>
  ): void;

  once(event: "MarkedAsHuman", cb: Callback<MarkedAsHuman>): void;
  once(
    event: "MarkedAsHuman",
    options: EventOptions,
    cb: Callback<MarkedAsHuman>
  ): void;

  once(event: "MarkedAsNotBot", cb: Callback<MarkedAsNotBot>): void;
  once(
    event: "MarkedAsNotBot",
    options: EventOptions,
    cb: Callback<MarkedAsNotBot>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;
}
