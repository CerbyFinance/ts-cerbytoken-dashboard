/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type BurnHumanAddress = ContractEventLog<{
  sender: string;
  amount: string;
  0: string;
  1: string;
}>;
export type BurnedByBridge = ContractEventLog<{
  sender: string;
  amount: string;
  0: string;
  1: string;
}>;
export type ClaimedReferralRewards = ContractEventLog<{
  recipient: string;
  amount: string;
  0: string;
  1: string;
}>;
export type MintHumanAddress = ContractEventLog<{
  recipient: string;
  amount: string;
  0: string;
  1: string;
}>;
export type MintedByBridge = ContractEventLog<{
  recipient: string;
  amount: string;
  0: string;
  1: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type TransferCustom = ContractEventLog<{
  sender: string;
  recipient: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdatedUtilsContracts = ContractEventLog<{
  accessSettings: [boolean, boolean, boolean, boolean, boolean, string][];
  0: [boolean, boolean, boolean, boolean, boolean, string][];
}>;
export type VestedAmountClaimed = ContractEventLog<{
  recipient: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface DefiFactoryToken extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DefiFactoryToken;
  clone(): DefiFactoryToken;
  methods: {
    DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>;

    ROLE_ADMIN(): NonPayableTransactionObject<string>;

    ROLE_BURNER(): NonPayableTransactionObject<string>;

    ROLE_MINTER(): NonPayableTransactionObject<string>;

    ROLE_MODERATOR(): NonPayableTransactionObject<string>;

    ROLE_TAXER(): NonPayableTransactionObject<string>;

    ROLE_TRANSFERER(): NonPayableTransactionObject<string>;

    allowance(
      owner: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    balanceOf(account: string): NonPayableTransactionObject<string>;

    burnByBridge(
      from: string,
      desiredAmountToBurn: number | string | BN
    ): NonPayableTransactionObject<void>;

    burnHumanAddress(
      from: string,
      desiredAmountToBurn: number | string | BN
    ): NonPayableTransactionObject<void>;

    chargeCustomTax(
      from: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    claimReferrerRewards(
      referrals: string[]
    ): NonPayableTransactionObject<void>;

    decimals(): NonPayableTransactionObject<string>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    filterNonZeroReferrals(
      referrals: string[]
    ): NonPayableTransactionObject<string[]>;

    getCachedReferrerRewards(addr: string): NonPayableTransactionObject<string>;

    getCalculatedReferrerRewards(
      addr: string,
      referrals: string[]
    ): NonPayableTransactionObject<string>;

    getChainId(): NonPayableTransactionObject<string>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getRoleMember(
      role: string | number[],
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    getRoleMemberCount(
      role: string | number[]
    ): NonPayableTransactionObject<string>;

    getTemporaryReferralRealAmountsBulk(
      addrs: string[]
    ): NonPayableTransactionObject<[string, string][]>;

    getUtilsContractAtPos(
      pos: number | string | BN
    ): NonPayableTransactionObject<string>;

    getUtilsContractsCount(): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    initializeAfterCreate2(
      __newOwner: string
    ): NonPayableTransactionObject<void>;

    isPaused(): NonPayableTransactionObject<boolean>;

    mintByBridge(
      to: string,
      desiredAmountToMint: number | string | BN
    ): NonPayableTransactionObject<void>;

    mintHumanAddress(
      to: string,
      desiredAmountToMint: number | string | BN
    ): NonPayableTransactionObject<void>;

    moderatorTransferFromWhilePaused(
      sender: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    name(): NonPayableTransactionObject<string>;

    nonces(owner: string): NonPayableTransactionObject<string>;

    pauseContract(): NonPayableTransactionObject<void>;

    permit(
      owner: string,
      spender: string,
      value: number | string | BN,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<void>;

    registerReferral(referrer: string): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    resumeContract(): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    symbol(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferCustom(
      sender: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFromTeamVestingContract(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateNameAndSymbol(
      __name: string,
      __symbol: string
    ): NonPayableTransactionObject<void>;

    updateUtilsContracts(
      accessSettings: [boolean, boolean, boolean, boolean, boolean, string][]
    ): NonPayableTransactionObject<void>;

    wasInitialized(): NonPayableTransactionObject<boolean>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    BurnHumanAddress(cb?: Callback<BurnHumanAddress>): EventEmitter;
    BurnHumanAddress(
      options?: EventOptions,
      cb?: Callback<BurnHumanAddress>
    ): EventEmitter;

    BurnedByBridge(cb?: Callback<BurnedByBridge>): EventEmitter;
    BurnedByBridge(
      options?: EventOptions,
      cb?: Callback<BurnedByBridge>
    ): EventEmitter;

    ClaimedReferralRewards(cb?: Callback<ClaimedReferralRewards>): EventEmitter;
    ClaimedReferralRewards(
      options?: EventOptions,
      cb?: Callback<ClaimedReferralRewards>
    ): EventEmitter;

    MintHumanAddress(cb?: Callback<MintHumanAddress>): EventEmitter;
    MintHumanAddress(
      options?: EventOptions,
      cb?: Callback<MintHumanAddress>
    ): EventEmitter;

    MintedByBridge(cb?: Callback<MintedByBridge>): EventEmitter;
    MintedByBridge(
      options?: EventOptions,
      cb?: Callback<MintedByBridge>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    TransferCustom(cb?: Callback<TransferCustom>): EventEmitter;
    TransferCustom(
      options?: EventOptions,
      cb?: Callback<TransferCustom>
    ): EventEmitter;

    UpdatedUtilsContracts(cb?: Callback<UpdatedUtilsContracts>): EventEmitter;
    UpdatedUtilsContracts(
      options?: EventOptions,
      cb?: Callback<UpdatedUtilsContracts>
    ): EventEmitter;

    VestedAmountClaimed(cb?: Callback<VestedAmountClaimed>): EventEmitter;
    VestedAmountClaimed(
      options?: EventOptions,
      cb?: Callback<VestedAmountClaimed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "BurnHumanAddress", cb: Callback<BurnHumanAddress>): void;
  once(
    event: "BurnHumanAddress",
    options: EventOptions,
    cb: Callback<BurnHumanAddress>
  ): void;

  once(event: "BurnedByBridge", cb: Callback<BurnedByBridge>): void;
  once(
    event: "BurnedByBridge",
    options: EventOptions,
    cb: Callback<BurnedByBridge>
  ): void;

  once(
    event: "ClaimedReferralRewards",
    cb: Callback<ClaimedReferralRewards>
  ): void;
  once(
    event: "ClaimedReferralRewards",
    options: EventOptions,
    cb: Callback<ClaimedReferralRewards>
  ): void;

  once(event: "MintHumanAddress", cb: Callback<MintHumanAddress>): void;
  once(
    event: "MintHumanAddress",
    options: EventOptions,
    cb: Callback<MintHumanAddress>
  ): void;

  once(event: "MintedByBridge", cb: Callback<MintedByBridge>): void;
  once(
    event: "MintedByBridge",
    options: EventOptions,
    cb: Callback<MintedByBridge>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;

  once(event: "TransferCustom", cb: Callback<TransferCustom>): void;
  once(
    event: "TransferCustom",
    options: EventOptions,
    cb: Callback<TransferCustom>
  ): void;

  once(
    event: "UpdatedUtilsContracts",
    cb: Callback<UpdatedUtilsContracts>
  ): void;
  once(
    event: "UpdatedUtilsContracts",
    options: EventOptions,
    cb: Callback<UpdatedUtilsContracts>
  ): void;

  once(event: "VestedAmountClaimed", cb: Callback<VestedAmountClaimed>): void;
  once(
    event: "VestedAmountClaimed",
    options: EventOptions,
    cb: Callback<VestedAmountClaimed>
  ): void;
}
