/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    "ROLE_ADMIN()": FunctionFragment;
    "adminBurnAndAddToStakersInflation(address,uint256)": FunctionFragment;
    "adminUpdateSettings((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "bulkEndStake(uint256[])": FunctionFragment;
    "bulkScrapeStake(uint256[])": FunctionFragment;
    "bulkStartStake(tuple[])": FunctionFragment;
    "bulkTransferOwnership(uint256[],address)": FunctionFragment;
    "cachedInterestPerShare(uint256)": FunctionFragment;
    "dailySnapshots(uint256)": FunctionFragment;
    "endStake(uint256)": FunctionFragment;
    "getCachedInterestPerShareLength()": FunctionFragment;
    "getCurrentCachedPerShareDay()": FunctionFragment;
    "getCurrentDaySinceLaunch()": FunctionFragment;
    "getDailySnapshotsLength()": FunctionFragment;
    "getInterestById(uint256,uint256)": FunctionFragment;
    "getInterestByStake((address,uint256,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "getPenaltyById(uint256,uint256,uint256)": FunctionFragment;
    "getPenaltyByStake((address,uint256,uint256,uint256,uint256,uint256),uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getSharesCountById(uint256,uint256)": FunctionFragment;
    "getSharesCountByStake((address,uint256,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "getStakesLength()": FunctionFragment;
    "getTotalTokensStaked()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "grantRolesBulk(tuple[])": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "launchTimestamp()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "scrapeStake(uint256)": FunctionFragment;
    "settings()": FunctionFragment;
    "stakes(uint256)": FunctionFragment;
    "startStake((uint256,uint256))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(uint256,address)": FunctionFragment;
    "updateAllSnapshots()": FunctionFragment;
    "updateSnapshots(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ROLE_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminBurnAndAddToStakersInflation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminUpdateSettings",
    values: [
      {
        MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumberish;
        CONTROLLED_APY: BigNumberish;
        SMALLER_PAYS_BETTER_BONUS: BigNumberish;
        LONGER_PAYS_BETTER_BONUS: BigNumberish;
        END_STAKE_FROM: BigNumberish;
        END_STAKE_TO: BigNumberish;
        MINIMUM_STAKE_DAYS: BigNumberish;
        MAXIMUM_STAKE_DAYS: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkEndStake",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkScrapeStake",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkStartStake",
    values: [{ stakedAmount: BigNumberish; lockedForXDays: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkTransferOwnership",
    values: [BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "cachedInterestPerShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailySnapshots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCachedInterestPerShareLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCachedPerShareDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDaySinceLaunch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDailySnapshotsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestById",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestByStake",
    values: [
      {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPenaltyById",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPenaltyByStake",
    values: [
      {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesCountById",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesCountByStake",
    values: [
      {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokensStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRolesBulk",
    values: [{ role: BytesLike; addr: string }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "launchTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "scrapeStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startStake",
    values: [{ stakedAmount: BigNumberish; lockedForXDays: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllSnapshots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSnapshots",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ROLE_ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminBurnAndAddToStakersInflation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminUpdateSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkEndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkScrapeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkStartStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cachedInterestPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailySnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCachedInterestPerShareLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCachedPerShareDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDaySinceLaunch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDailySnapshotsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestByStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPenaltyById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPenaltyByStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesCountById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesCountByStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokensStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantRolesBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "launchTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scrapeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSnapshots",
    data: BytesLike
  ): Result;

  events: {
    "CachedInterestPerShareSealed(uint256,uint256,uint256)": EventFragment;
    "DailySnapshotSealed(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "NewMaxSharePriceReached(uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SettingsUpdated(tuple)": EventFragment;
    "StakeEnded(uint256,uint256,uint256,uint256)": EventFragment;
    "StakeOwnerChanged(uint256,address)": EventFragment;
    "StakeStarted(uint256,address,uint256,uint256,uint256,uint256)": EventFragment;
    "StakeUpdated(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CachedInterestPerShareSealed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DailySnapshotSealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMaxSharePriceReached"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeOwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeUpdated"): EventFragment;
}

export type CachedInterestPerShareSealedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    sealedDay: BigNumber;
    sealedCachedDay: BigNumber;
    cachedInterestPerShare: BigNumber;
  }
>;

export type DailySnapshotSealedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    sealedDay: BigNumber;
    inflationAmount: BigNumber;
    totalShares: BigNumber;
    sharePrice: BigNumber;
    totalStaked: BigNumber;
    totalSupply: BigNumber;
  }
>;

export type NewMaxSharePriceReachedEvent = TypedEvent<
  [BigNumber] & { newSharePrice: BigNumber }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SettingsUpdatedEvent = TypedEvent<
  [
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumber;
      CONTROLLED_APY: BigNumber;
      SMALLER_PAYS_BETTER_BONUS: BigNumber;
      LONGER_PAYS_BETTER_BONUS: BigNumber;
      END_STAKE_FROM: BigNumber;
      END_STAKE_TO: BigNumber;
      MINIMUM_STAKE_DAYS: BigNumber;
      MAXIMUM_STAKE_DAYS: BigNumber;
    }
  ] & {
    Settings: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumber;
      CONTROLLED_APY: BigNumber;
      SMALLER_PAYS_BETTER_BONUS: BigNumber;
      LONGER_PAYS_BETTER_BONUS: BigNumber;
      END_STAKE_FROM: BigNumber;
      END_STAKE_TO: BigNumber;
      MINIMUM_STAKE_DAYS: BigNumber;
      MAXIMUM_STAKE_DAYS: BigNumber;
    };
  }
>;

export type StakeEndedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    stakeId: BigNumber;
    endDay: BigNumber;
    interest: BigNumber;
    penalty: BigNumber;
  }
>;

export type StakeOwnerChangedEvent = TypedEvent<
  [BigNumber, string] & { stakeId: BigNumber; newOwner: string }
>;

export type StakeStartedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    stakeId: BigNumber;
    owner: string;
    stakedAmount: BigNumber;
    startDay: BigNumber;
    lockedForXDays: BigNumber;
    sharesCount: BigNumber;
  }
>;

export type StakeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    stakeId: BigNumber;
    lockedForXDays: BigNumber;
    sharesCount: BigNumber;
  }
>;

export class Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingInterface;

  functions: {
    ROLE_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    adminBurnAndAddToStakersInflation(
      fromAddr: string,
      amountToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminUpdateSettings(
      _settings: {
        MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumberish;
        CONTROLLED_APY: BigNumberish;
        SMALLER_PAYS_BETTER_BONUS: BigNumberish;
        LONGER_PAYS_BETTER_BONUS: BigNumberish;
        END_STAKE_FROM: BigNumberish;
        END_STAKE_TO: BigNumberish;
        MINIMUM_STAKE_DAYS: BigNumberish;
        MAXIMUM_STAKE_DAYS: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkEndStake(
      stakeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkScrapeStake(
      stakeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkStartStake(
      startStakes: {
        stakedAmount: BigNumberish;
        lockedForXDays: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkTransferOwnership(
      stakeIds: BigNumberish[],
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cachedInterestPerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dailySnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        inflationAmount: BigNumber;
        totalShares: BigNumber;
        sharePrice: BigNumber;
      }
    >;

    endStake(
      stakeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCachedInterestPerShareLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentCachedPerShareDay(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentDaySinceLaunch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDailySnapshotsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInterestById(
      stakeId: BigNumberish,
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInterestByStake(
      stake: {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPenaltyById(
      stakeId: BigNumberish,
      givenDay: BigNumberish,
      interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPenaltyByStake(
      stake: {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      givenDay: BigNumberish,
      interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSharesCountById(
      stakeId: BigNumberish,
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSharesCountByStake(
      stake: {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalTokensStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRolesBulk(
      roles: { role: BytesLike; addr: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    launchTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    scrapeStake(
      stakeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumber;
        CONTROLLED_APY: BigNumber;
        SMALLER_PAYS_BETTER_BONUS: BigNumber;
        LONGER_PAYS_BETTER_BONUS: BigNumber;
        END_STAKE_FROM: BigNumber;
        END_STAKE_TO: BigNumber;
        MINIMUM_STAKE_DAYS: BigNumber;
        MAXIMUM_STAKE_DAYS: BigNumber;
      }
    >;

    stakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        stakedAmount: BigNumber;
        startDay: BigNumber;
        lockedForXDays: BigNumber;
        endDay: BigNumber;
        maxSharesCountOnStartStake: BigNumber;
      }
    >;

    startStake(
      _startStake: { stakedAmount: BigNumberish; lockedForXDays: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      stakeId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAllSnapshots(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSnapshots(
      givenDay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ROLE_ADMIN(overrides?: CallOverrides): Promise<string>;

  adminBurnAndAddToStakersInflation(
    fromAddr: string,
    amountToBurn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminUpdateSettings(
    _settings: {
      MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumberish;
      CONTROLLED_APY: BigNumberish;
      SMALLER_PAYS_BETTER_BONUS: BigNumberish;
      LONGER_PAYS_BETTER_BONUS: BigNumberish;
      END_STAKE_FROM: BigNumberish;
      END_STAKE_TO: BigNumberish;
      MINIMUM_STAKE_DAYS: BigNumberish;
      MAXIMUM_STAKE_DAYS: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkEndStake(
    stakeIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkScrapeStake(
    stakeIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkStartStake(
    startStakes: { stakedAmount: BigNumberish; lockedForXDays: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkTransferOwnership(
    stakeIds: BigNumberish[],
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cachedInterestPerShare(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dailySnapshots(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      inflationAmount: BigNumber;
      totalShares: BigNumber;
      sharePrice: BigNumber;
    }
  >;

  endStake(
    stakeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCachedInterestPerShareLength(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentCachedPerShareDay(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentDaySinceLaunch(overrides?: CallOverrides): Promise<BigNumber>;

  getDailySnapshotsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getInterestById(
    stakeId: BigNumberish,
    givenDay: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInterestByStake(
    stake: {
      owner: string;
      stakedAmount: BigNumberish;
      startDay: BigNumberish;
      lockedForXDays: BigNumberish;
      endDay: BigNumberish;
      maxSharesCountOnStartStake: BigNumberish;
    },
    givenDay: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPenaltyById(
    stakeId: BigNumberish,
    givenDay: BigNumberish,
    interest: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPenaltyByStake(
    stake: {
      owner: string;
      stakedAmount: BigNumberish;
      startDay: BigNumberish;
      lockedForXDays: BigNumberish;
      endDay: BigNumberish;
      maxSharesCountOnStartStake: BigNumberish;
    },
    givenDay: BigNumberish,
    interest: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSharesCountById(
    stakeId: BigNumberish,
    givenDay: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSharesCountByStake(
    stake: {
      owner: string;
      stakedAmount: BigNumberish;
      startDay: BigNumberish;
      lockedForXDays: BigNumberish;
      endDay: BigNumberish;
      maxSharesCountOnStartStake: BigNumberish;
    },
    givenDay: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakesLength(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalTokensStaked(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRolesBulk(
    roles: { role: BytesLike; addr: string }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  launchTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  scrapeStake(
    stakeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settings(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumber;
      CONTROLLED_APY: BigNumber;
      SMALLER_PAYS_BETTER_BONUS: BigNumber;
      LONGER_PAYS_BETTER_BONUS: BigNumber;
      END_STAKE_FROM: BigNumber;
      END_STAKE_TO: BigNumber;
      MINIMUM_STAKE_DAYS: BigNumber;
      MAXIMUM_STAKE_DAYS: BigNumber;
    }
  >;

  stakes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      stakedAmount: BigNumber;
      startDay: BigNumber;
      lockedForXDays: BigNumber;
      endDay: BigNumber;
      maxSharesCountOnStartStake: BigNumber;
    }
  >;

  startStake(
    _startStake: { stakedAmount: BigNumberish; lockedForXDays: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    stakeId: BigNumberish,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAllSnapshots(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSnapshots(
    givenDay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ROLE_ADMIN(overrides?: CallOverrides): Promise<string>;

    adminBurnAndAddToStakersInflation(
      fromAddr: string,
      amountToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminUpdateSettings(
      _settings: {
        MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumberish;
        CONTROLLED_APY: BigNumberish;
        SMALLER_PAYS_BETTER_BONUS: BigNumberish;
        LONGER_PAYS_BETTER_BONUS: BigNumberish;
        END_STAKE_FROM: BigNumberish;
        END_STAKE_TO: BigNumberish;
        MINIMUM_STAKE_DAYS: BigNumberish;
        MAXIMUM_STAKE_DAYS: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    bulkEndStake(
      stakeIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    bulkScrapeStake(
      stakeIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    bulkStartStake(
      startStakes: {
        stakedAmount: BigNumberish;
        lockedForXDays: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    bulkTransferOwnership(
      stakeIds: BigNumberish[],
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cachedInterestPerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailySnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        inflationAmount: BigNumber;
        totalShares: BigNumber;
        sharePrice: BigNumber;
      }
    >;

    endStake(stakeId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getCachedInterestPerShareLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentCachedPerShareDay(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentDaySinceLaunch(overrides?: CallOverrides): Promise<BigNumber>;

    getDailySnapshotsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getInterestById(
      stakeId: BigNumberish,
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestByStake(
      stake: {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPenaltyById(
      stakeId: BigNumberish,
      givenDay: BigNumberish,
      interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPenaltyByStake(
      stake: {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      givenDay: BigNumberish,
      interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSharesCountById(
      stakeId: BigNumberish,
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSharesCountByStake(
      stake: {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokensStaked(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRolesBulk(
      roles: { role: BytesLike; addr: string }[],
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    launchTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    scrapeStake(
      stakeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumber;
        CONTROLLED_APY: BigNumber;
        SMALLER_PAYS_BETTER_BONUS: BigNumber;
        LONGER_PAYS_BETTER_BONUS: BigNumber;
        END_STAKE_FROM: BigNumber;
        END_STAKE_TO: BigNumber;
        MINIMUM_STAKE_DAYS: BigNumber;
        MAXIMUM_STAKE_DAYS: BigNumber;
      }
    >;

    stakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        stakedAmount: BigNumber;
        startDay: BigNumber;
        lockedForXDays: BigNumber;
        endDay: BigNumber;
        maxSharesCountOnStartStake: BigNumber;
      }
    >;

    startStake(
      _startStake: { stakedAmount: BigNumberish; lockedForXDays: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      stakeId: BigNumberish,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllSnapshots(overrides?: CallOverrides): Promise<void>;

    updateSnapshots(
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CachedInterestPerShareSealed(uint256,uint256,uint256)"(
      sealedDay?: null,
      sealedCachedDay?: null,
      cachedInterestPerShare?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        sealedDay: BigNumber;
        sealedCachedDay: BigNumber;
        cachedInterestPerShare: BigNumber;
      }
    >;

    CachedInterestPerShareSealed(
      sealedDay?: null,
      sealedCachedDay?: null,
      cachedInterestPerShare?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        sealedDay: BigNumber;
        sealedCachedDay: BigNumber;
        cachedInterestPerShare: BigNumber;
      }
    >;

    "DailySnapshotSealed(uint256,uint256,uint256,uint256,uint256,uint256)"(
      sealedDay?: null,
      inflationAmount?: null,
      totalShares?: null,
      sharePrice?: null,
      totalStaked?: null,
      totalSupply?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        sealedDay: BigNumber;
        inflationAmount: BigNumber;
        totalShares: BigNumber;
        sharePrice: BigNumber;
        totalStaked: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    DailySnapshotSealed(
      sealedDay?: null,
      inflationAmount?: null,
      totalShares?: null,
      sharePrice?: null,
      totalStaked?: null,
      totalSupply?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        sealedDay: BigNumber;
        inflationAmount: BigNumber;
        totalShares: BigNumber;
        sharePrice: BigNumber;
        totalStaked: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    "NewMaxSharePriceReached(uint256)"(
      newSharePrice?: null
    ): TypedEventFilter<[BigNumber], { newSharePrice: BigNumber }>;

    NewMaxSharePriceReached(
      newSharePrice?: null
    ): TypedEventFilter<[BigNumber], { newSharePrice: BigNumber }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "SettingsUpdated(tuple)"(
      Settings?: null
    ): TypedEventFilter<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumber;
          CONTROLLED_APY: BigNumber;
          SMALLER_PAYS_BETTER_BONUS: BigNumber;
          LONGER_PAYS_BETTER_BONUS: BigNumber;
          END_STAKE_FROM: BigNumber;
          END_STAKE_TO: BigNumber;
          MINIMUM_STAKE_DAYS: BigNumber;
          MAXIMUM_STAKE_DAYS: BigNumber;
        }
      ],
      {
        Settings: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumber;
          CONTROLLED_APY: BigNumber;
          SMALLER_PAYS_BETTER_BONUS: BigNumber;
          LONGER_PAYS_BETTER_BONUS: BigNumber;
          END_STAKE_FROM: BigNumber;
          END_STAKE_TO: BigNumber;
          MINIMUM_STAKE_DAYS: BigNumber;
          MAXIMUM_STAKE_DAYS: BigNumber;
        };
      }
    >;

    SettingsUpdated(
      Settings?: null
    ): TypedEventFilter<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumber;
          CONTROLLED_APY: BigNumber;
          SMALLER_PAYS_BETTER_BONUS: BigNumber;
          LONGER_PAYS_BETTER_BONUS: BigNumber;
          END_STAKE_FROM: BigNumber;
          END_STAKE_TO: BigNumber;
          MINIMUM_STAKE_DAYS: BigNumber;
          MAXIMUM_STAKE_DAYS: BigNumber;
        }
      ],
      {
        Settings: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumber;
          CONTROLLED_APY: BigNumber;
          SMALLER_PAYS_BETTER_BONUS: BigNumber;
          LONGER_PAYS_BETTER_BONUS: BigNumber;
          END_STAKE_FROM: BigNumber;
          END_STAKE_TO: BigNumber;
          MINIMUM_STAKE_DAYS: BigNumber;
          MAXIMUM_STAKE_DAYS: BigNumber;
        };
      }
    >;

    "StakeEnded(uint256,uint256,uint256,uint256)"(
      stakeId?: null,
      endDay?: null,
      interest?: null,
      penalty?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        stakeId: BigNumber;
        endDay: BigNumber;
        interest: BigNumber;
        penalty: BigNumber;
      }
    >;

    StakeEnded(
      stakeId?: null,
      endDay?: null,
      interest?: null,
      penalty?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        stakeId: BigNumber;
        endDay: BigNumber;
        interest: BigNumber;
        penalty: BigNumber;
      }
    >;

    "StakeOwnerChanged(uint256,address)"(
      stakeId?: null,
      newOwner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { stakeId: BigNumber; newOwner: string }
    >;

    StakeOwnerChanged(
      stakeId?: null,
      newOwner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { stakeId: BigNumber; newOwner: string }
    >;

    "StakeStarted(uint256,address,uint256,uint256,uint256,uint256)"(
      stakeId?: null,
      owner?: null,
      stakedAmount?: null,
      startDay?: null,
      lockedForXDays?: null,
      sharesCount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        stakeId: BigNumber;
        owner: string;
        stakedAmount: BigNumber;
        startDay: BigNumber;
        lockedForXDays: BigNumber;
        sharesCount: BigNumber;
      }
    >;

    StakeStarted(
      stakeId?: null,
      owner?: null,
      stakedAmount?: null,
      startDay?: null,
      lockedForXDays?: null,
      sharesCount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        stakeId: BigNumber;
        owner: string;
        stakedAmount: BigNumber;
        startDay: BigNumber;
        lockedForXDays: BigNumber;
        sharesCount: BigNumber;
      }
    >;

    "StakeUpdated(uint256,uint256,uint256)"(
      stakeId?: null,
      lockedForXDays?: null,
      sharesCount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { stakeId: BigNumber; lockedForXDays: BigNumber; sharesCount: BigNumber }
    >;

    StakeUpdated(
      stakeId?: null,
      lockedForXDays?: null,
      sharesCount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { stakeId: BigNumber; lockedForXDays: BigNumber; sharesCount: BigNumber }
    >;
  };

  estimateGas: {
    ROLE_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    adminBurnAndAddToStakersInflation(
      fromAddr: string,
      amountToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminUpdateSettings(
      _settings: {
        MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumberish;
        CONTROLLED_APY: BigNumberish;
        SMALLER_PAYS_BETTER_BONUS: BigNumberish;
        LONGER_PAYS_BETTER_BONUS: BigNumberish;
        END_STAKE_FROM: BigNumberish;
        END_STAKE_TO: BigNumberish;
        MINIMUM_STAKE_DAYS: BigNumberish;
        MAXIMUM_STAKE_DAYS: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkEndStake(
      stakeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkScrapeStake(
      stakeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkStartStake(
      startStakes: {
        stakedAmount: BigNumberish;
        lockedForXDays: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkTransferOwnership(
      stakeIds: BigNumberish[],
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cachedInterestPerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailySnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endStake(
      stakeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCachedInterestPerShareLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentCachedPerShareDay(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentDaySinceLaunch(overrides?: CallOverrides): Promise<BigNumber>;

    getDailySnapshotsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getInterestById(
      stakeId: BigNumberish,
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestByStake(
      stake: {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPenaltyById(
      stakeId: BigNumberish,
      givenDay: BigNumberish,
      interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPenaltyByStake(
      stake: {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      givenDay: BigNumberish,
      interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSharesCountById(
      stakeId: BigNumberish,
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSharesCountByStake(
      stake: {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokensStaked(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRolesBulk(
      roles: { role: BytesLike; addr: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launchTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    scrapeStake(
      stakeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    stakes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    startStake(
      _startStake: { stakedAmount: BigNumberish; lockedForXDays: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      stakeId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAllSnapshots(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSnapshots(
      givenDay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ROLE_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminBurnAndAddToStakersInflation(
      fromAddr: string,
      amountToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminUpdateSettings(
      _settings: {
        MINIMUM_DAYS_FOR_HIGH_PENALTY: BigNumberish;
        CONTROLLED_APY: BigNumberish;
        SMALLER_PAYS_BETTER_BONUS: BigNumberish;
        LONGER_PAYS_BETTER_BONUS: BigNumberish;
        END_STAKE_FROM: BigNumberish;
        END_STAKE_TO: BigNumberish;
        MINIMUM_STAKE_DAYS: BigNumberish;
        MAXIMUM_STAKE_DAYS: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkEndStake(
      stakeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkScrapeStake(
      stakeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkStartStake(
      startStakes: {
        stakedAmount: BigNumberish;
        lockedForXDays: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkTransferOwnership(
      stakeIds: BigNumberish[],
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cachedInterestPerShare(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailySnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endStake(
      stakeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCachedInterestPerShareLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentCachedPerShareDay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentDaySinceLaunch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDailySnapshotsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestById(
      stakeId: BigNumberish,
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestByStake(
      stake: {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPenaltyById(
      stakeId: BigNumberish,
      givenDay: BigNumberish,
      interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPenaltyByStake(
      stake: {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      givenDay: BigNumberish,
      interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSharesCountById(
      stakeId: BigNumberish,
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSharesCountByStake(
      stake: {
        owner: string;
        stakedAmount: BigNumberish;
        startDay: BigNumberish;
        lockedForXDays: BigNumberish;
        endDay: BigNumberish;
        maxSharesCountOnStartStake: BigNumberish;
      },
      givenDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalTokensStaked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRolesBulk(
      roles: { role: BytesLike; addr: string }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launchTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    scrapeStake(
      stakeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startStake(
      _startStake: { stakedAmount: BigNumberish; lockedForXDays: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      stakeId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAllSnapshots(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSnapshots(
      givenDay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
