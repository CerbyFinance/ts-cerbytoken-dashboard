/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PresaleFactoryInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidityOnUniswapV2()": FunctionFragment;
    "amountOfTokensForInvestors()": FunctionFragment;
    "checkIfAllVestingWasSet()": FunctionFragment;
    "checkIfPairIsCreated()": FunctionFragment;
    "checkIfTokenomicsIsValid()": FunctionFragment;
    "claimVesting()": FunctionFragment;
    "emergencyRefund(uint256,uint256)": FunctionFragment;
    "getAvailableVestingTokens(address)": FunctionFragment;
    "getInformation(address)": FunctionFragment;
    "getTokenomics()": FunctionFragment;
    "invest(address)": FunctionFragment;
    "listInvestors(uint256,uint256)": FunctionFragment;
    "listReferrals(uint256,uint256)": FunctionFragment;
    "markGoalAsReached()": FunctionFragment;
    "owner()": FunctionFragment;
    "prepareAddLiqudity()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setVestingForInvestorsTokens(uint256,uint256)": FunctionFragment;
    "setVestingForReferralsTokens(uint256,uint256)": FunctionFragment;
    "setVestingForTokenomicsTokens()": FunctionFragment;
    "settings()": FunctionFragment;
    "skipSteps1()": FunctionFragment;
    "skipSteps2(uint256)": FunctionFragment;
    "state()": FunctionFragment;
    "totalTokenSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateSettings((address,string,string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidityOnUniswapV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountOfTokensForInvestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfAllVestingWasSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfPairIsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfTokenomicsIsValid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimVesting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRefund",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableVestingTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInformation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenomics",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "invest", values: [string]): string;
  encodeFunctionData(
    functionFragment: "listInvestors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listReferrals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markGoalAsReached",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareAddLiqudity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingForInvestorsTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingForReferralsTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingForTokenomicsTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "skipSteps1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "skipSteps2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalTokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSettings",
    values: [
      {
        tokenAddress: string;
        presaleName: string;
        website: string;
        telegram: string;
        uniswapLiquidityLockedFor: BigNumberish;
        presaleLockedFor: BigNumberish;
        presaleVestedFor: BigNumberish;
        referralsLockedFor: BigNumberish;
        referralsVestedFor: BigNumberish;
        maxWethCap: BigNumberish;
        perWalletMinWeth: BigNumberish;
        perWalletMaxWeth: BigNumberish;
        fixedPriceInDeft: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidityOnUniswapV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountOfTokensForInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfAllVestingWasSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfPairIsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfTokenomicsIsValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableVestingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenomics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listReferrals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markGoalAsReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareAddLiqudity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingForInvestorsTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingForReferralsTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingForTokenomicsTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skipSteps1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skipSteps2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSettings",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "StateChanged(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateChanged"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type StateChangedEvent = TypedEvent<[number] & { newState: number }>;

export class PresaleFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PresaleFactoryInterface;

  functions: {
    addLiquidityOnUniswapV2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    amountOfTokensForInvestors(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkIfAllVestingWasSet(overrides?: CallOverrides): Promise<[boolean]>;

    checkIfPairIsCreated(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkIfTokenomicsIsValid(overrides?: CallOverrides): Promise<[boolean]>;

    claimVesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyRefund(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAvailableVestingTokens(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInformation(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            string,
            string,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            string,
            string
          ] & {
            presaleContractAddress: string;
            presaleName: string;
            totalInvestedWeth: BigNumber;
            maxWethCap: BigNumber;
            isActive: boolean;
            isEnabled: boolean;
            website: string;
            telegram: string;
          },
          [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            walletAddress: string;
            walletInvestedWeth: BigNumber;
            walletReferralEarnings: BigNumber;
            minimumWethPerWallet: BigNumber;
            maximumWethPerWallet: BigNumber;
          },
          [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            vestingAddr: string;
            tokensReserved: BigNumber;
            tokensClaimed: BigNumber;
            lockedUntilTimestamp: BigNumber;
            vestedUntilTimestamp: BigNumber;
          },
          ([string, string, BigNumber, BigNumber, BigNumber] & {
            tokenomicsAddr: string;
            tokenomicsName: string;
            tokenomicsPercentage: BigNumber;
            tokenomicsLockedForXSeconds: BigNumber;
            tokenomicsVestedForXSeconds: BigNumber;
          })[],
          BigNumber,
          BigNumber
        ] & {
          presaleItem: [
            string,
            string,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            string,
            string
          ] & {
            presaleContractAddress: string;
            presaleName: string;
            totalInvestedWeth: BigNumber;
            maxWethCap: BigNumber;
            isActive: boolean;
            isEnabled: boolean;
            website: string;
            telegram: string;
          };
          walletInfo: [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            walletAddress: string;
            walletInvestedWeth: BigNumber;
            walletReferralEarnings: BigNumber;
            minimumWethPerWallet: BigNumber;
            maximumWethPerWallet: BigNumber;
          };
          vestingInfo: [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            vestingAddr: string;
            tokensReserved: BigNumber;
            tokensClaimed: BigNumber;
            lockedUntilTimestamp: BigNumber;
            vestedUntilTimestamp: BigNumber;
          };
          tokenomics: ([string, string, BigNumber, BigNumber, BigNumber] & {
            tokenomicsAddr: string;
            tokenomicsName: string;
            tokenomicsPercentage: BigNumber;
            tokenomicsLockedForXSeconds: BigNumber;
            tokenomicsVestedForXSeconds: BigNumber;
          })[];
          listingPrice: BigNumber;
          createdAt: BigNumber;
        }
      ] & {
        output: [
          [
            string,
            string,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            string,
            string
          ] & {
            presaleContractAddress: string;
            presaleName: string;
            totalInvestedWeth: BigNumber;
            maxWethCap: BigNumber;
            isActive: boolean;
            isEnabled: boolean;
            website: string;
            telegram: string;
          },
          [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            walletAddress: string;
            walletInvestedWeth: BigNumber;
            walletReferralEarnings: BigNumber;
            minimumWethPerWallet: BigNumber;
            maximumWethPerWallet: BigNumber;
          },
          [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            vestingAddr: string;
            tokensReserved: BigNumber;
            tokensClaimed: BigNumber;
            lockedUntilTimestamp: BigNumber;
            vestedUntilTimestamp: BigNumber;
          },
          ([string, string, BigNumber, BigNumber, BigNumber] & {
            tokenomicsAddr: string;
            tokenomicsName: string;
            tokenomicsPercentage: BigNumber;
            tokenomicsLockedForXSeconds: BigNumber;
            tokenomicsVestedForXSeconds: BigNumber;
          })[],
          BigNumber,
          BigNumber
        ] & {
          presaleItem: [
            string,
            string,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            string,
            string
          ] & {
            presaleContractAddress: string;
            presaleName: string;
            totalInvestedWeth: BigNumber;
            maxWethCap: BigNumber;
            isActive: boolean;
            isEnabled: boolean;
            website: string;
            telegram: string;
          };
          walletInfo: [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            walletAddress: string;
            walletInvestedWeth: BigNumber;
            walletReferralEarnings: BigNumber;
            minimumWethPerWallet: BigNumber;
            maximumWethPerWallet: BigNumber;
          };
          vestingInfo: [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            vestingAddr: string;
            tokensReserved: BigNumber;
            tokensClaimed: BigNumber;
            lockedUntilTimestamp: BigNumber;
            vestedUntilTimestamp: BigNumber;
          };
          tokenomics: ([string, string, BigNumber, BigNumber, BigNumber] & {
            tokenomicsAddr: string;
            tokenomicsName: string;
            tokenomicsPercentage: BigNumber;
            tokenomicsLockedForXSeconds: BigNumber;
            tokenomicsVestedForXSeconds: BigNumber;
          })[];
          listingPrice: BigNumber;
          createdAt: BigNumber;
        };
      }
    >;

    getTokenomics(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, BigNumber, BigNumber, BigNumber] & {
          tokenomicsAddr: string;
          tokenomicsName: string;
          tokenomicsPercentage: BigNumber;
          tokenomicsLockedForXSeconds: BigNumber;
          tokenomicsVestedForXSeconds: BigNumber;
        })[]
      ]
    >;

    invest(
      referralAddr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listInvestors(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, BigNumber] & {
          investorAddr: string;
          referralAddr: string;
          wethValue: BigNumber;
        })[]
      ]
    >;

    listReferrals(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { referralAddr: string; earnings: BigNumber })[]]
    >;

    markGoalAsReached(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prepareAddLiqudity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVestingForInvestorsTokens(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVestingForReferralsTokens(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVestingForTokenomicsTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tokenAddress: string;
        presaleName: string;
        website: string;
        telegram: string;
        uniswapLiquidityLockedFor: BigNumber;
        presaleLockedFor: BigNumber;
        presaleVestedFor: BigNumber;
        referralsLockedFor: BigNumber;
        referralsVestedFor: BigNumber;
        maxWethCap: BigNumber;
        perWalletMinWeth: BigNumber;
        perWalletMaxWeth: BigNumber;
        fixedPriceInDeft: BigNumber;
      }
    >;

    skipSteps1(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    skipSteps2(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    state(overrides?: CallOverrides): Promise<[number]>;

    totalTokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSettings(
      _settings: {
        tokenAddress: string;
        presaleName: string;
        website: string;
        telegram: string;
        uniswapLiquidityLockedFor: BigNumberish;
        presaleLockedFor: BigNumberish;
        presaleVestedFor: BigNumberish;
        referralsLockedFor: BigNumberish;
        referralsVestedFor: BigNumberish;
        maxWethCap: BigNumberish;
        perWalletMinWeth: BigNumberish;
        perWalletMaxWeth: BigNumberish;
        fixedPriceInDeft: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidityOnUniswapV2(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  amountOfTokensForInvestors(overrides?: CallOverrides): Promise<BigNumber>;

  checkIfAllVestingWasSet(overrides?: CallOverrides): Promise<boolean>;

  checkIfPairIsCreated(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkIfTokenomicsIsValid(overrides?: CallOverrides): Promise<boolean>;

  claimVesting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyRefund(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAvailableVestingTokens(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInformation(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        string
      ] & {
        presaleContractAddress: string;
        presaleName: string;
        totalInvestedWeth: BigNumber;
        maxWethCap: BigNumber;
        isActive: boolean;
        isEnabled: boolean;
        website: string;
        telegram: string;
      },
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        walletAddress: string;
        walletInvestedWeth: BigNumber;
        walletReferralEarnings: BigNumber;
        minimumWethPerWallet: BigNumber;
        maximumWethPerWallet: BigNumber;
      },
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        vestingAddr: string;
        tokensReserved: BigNumber;
        tokensClaimed: BigNumber;
        lockedUntilTimestamp: BigNumber;
        vestedUntilTimestamp: BigNumber;
      },
      ([string, string, BigNumber, BigNumber, BigNumber] & {
        tokenomicsAddr: string;
        tokenomicsName: string;
        tokenomicsPercentage: BigNumber;
        tokenomicsLockedForXSeconds: BigNumber;
        tokenomicsVestedForXSeconds: BigNumber;
      })[],
      BigNumber,
      BigNumber
    ] & {
      presaleItem: [
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        string
      ] & {
        presaleContractAddress: string;
        presaleName: string;
        totalInvestedWeth: BigNumber;
        maxWethCap: BigNumber;
        isActive: boolean;
        isEnabled: boolean;
        website: string;
        telegram: string;
      };
      walletInfo: [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        walletAddress: string;
        walletInvestedWeth: BigNumber;
        walletReferralEarnings: BigNumber;
        minimumWethPerWallet: BigNumber;
        maximumWethPerWallet: BigNumber;
      };
      vestingInfo: [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        vestingAddr: string;
        tokensReserved: BigNumber;
        tokensClaimed: BigNumber;
        lockedUntilTimestamp: BigNumber;
        vestedUntilTimestamp: BigNumber;
      };
      tokenomics: ([string, string, BigNumber, BigNumber, BigNumber] & {
        tokenomicsAddr: string;
        tokenomicsName: string;
        tokenomicsPercentage: BigNumber;
        tokenomicsLockedForXSeconds: BigNumber;
        tokenomicsVestedForXSeconds: BigNumber;
      })[];
      listingPrice: BigNumber;
      createdAt: BigNumber;
    }
  >;

  getTokenomics(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber, BigNumber, BigNumber] & {
      tokenomicsAddr: string;
      tokenomicsName: string;
      tokenomicsPercentage: BigNumber;
      tokenomicsLockedForXSeconds: BigNumber;
      tokenomicsVestedForXSeconds: BigNumber;
    })[]
  >;

  invest(
    referralAddr: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listInvestors(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber] & {
      investorAddr: string;
      referralAddr: string;
      wethValue: BigNumber;
    })[]
  >;

  listReferrals(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber] & { referralAddr: string; earnings: BigNumber })[]
  >;

  markGoalAsReached(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  prepareAddLiqudity(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVestingForInvestorsTokens(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVestingForReferralsTokens(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVestingForTokenomicsTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settings(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      tokenAddress: string;
      presaleName: string;
      website: string;
      telegram: string;
      uniswapLiquidityLockedFor: BigNumber;
      presaleLockedFor: BigNumber;
      presaleVestedFor: BigNumber;
      referralsLockedFor: BigNumber;
      referralsVestedFor: BigNumber;
      maxWethCap: BigNumber;
      perWalletMinWeth: BigNumber;
      perWalletMaxWeth: BigNumber;
      fixedPriceInDeft: BigNumber;
    }
  >;

  skipSteps1(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  skipSteps2(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  state(overrides?: CallOverrides): Promise<number>;

  totalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSettings(
    _settings: {
      tokenAddress: string;
      presaleName: string;
      website: string;
      telegram: string;
      uniswapLiquidityLockedFor: BigNumberish;
      presaleLockedFor: BigNumberish;
      presaleVestedFor: BigNumberish;
      referralsLockedFor: BigNumberish;
      referralsVestedFor: BigNumberish;
      maxWethCap: BigNumberish;
      perWalletMinWeth: BigNumberish;
      perWalletMaxWeth: BigNumberish;
      fixedPriceInDeft: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidityOnUniswapV2(overrides?: CallOverrides): Promise<void>;

    amountOfTokensForInvestors(overrides?: CallOverrides): Promise<BigNumber>;

    checkIfAllVestingWasSet(overrides?: CallOverrides): Promise<boolean>;

    checkIfPairIsCreated(overrides?: CallOverrides): Promise<void>;

    checkIfTokenomicsIsValid(overrides?: CallOverrides): Promise<boolean>;

    claimVesting(overrides?: CallOverrides): Promise<void>;

    emergencyRefund(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailableVestingTokens(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInformation(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          string,
          string
        ] & {
          presaleContractAddress: string;
          presaleName: string;
          totalInvestedWeth: BigNumber;
          maxWethCap: BigNumber;
          isActive: boolean;
          isEnabled: boolean;
          website: string;
          telegram: string;
        },
        [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          walletAddress: string;
          walletInvestedWeth: BigNumber;
          walletReferralEarnings: BigNumber;
          minimumWethPerWallet: BigNumber;
          maximumWethPerWallet: BigNumber;
        },
        [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          vestingAddr: string;
          tokensReserved: BigNumber;
          tokensClaimed: BigNumber;
          lockedUntilTimestamp: BigNumber;
          vestedUntilTimestamp: BigNumber;
        },
        ([string, string, BigNumber, BigNumber, BigNumber] & {
          tokenomicsAddr: string;
          tokenomicsName: string;
          tokenomicsPercentage: BigNumber;
          tokenomicsLockedForXSeconds: BigNumber;
          tokenomicsVestedForXSeconds: BigNumber;
        })[],
        BigNumber,
        BigNumber
      ] & {
        presaleItem: [
          string,
          string,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          string,
          string
        ] & {
          presaleContractAddress: string;
          presaleName: string;
          totalInvestedWeth: BigNumber;
          maxWethCap: BigNumber;
          isActive: boolean;
          isEnabled: boolean;
          website: string;
          telegram: string;
        };
        walletInfo: [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          walletAddress: string;
          walletInvestedWeth: BigNumber;
          walletReferralEarnings: BigNumber;
          minimumWethPerWallet: BigNumber;
          maximumWethPerWallet: BigNumber;
        };
        vestingInfo: [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          vestingAddr: string;
          tokensReserved: BigNumber;
          tokensClaimed: BigNumber;
          lockedUntilTimestamp: BigNumber;
          vestedUntilTimestamp: BigNumber;
        };
        tokenomics: ([string, string, BigNumber, BigNumber, BigNumber] & {
          tokenomicsAddr: string;
          tokenomicsName: string;
          tokenomicsPercentage: BigNumber;
          tokenomicsLockedForXSeconds: BigNumber;
          tokenomicsVestedForXSeconds: BigNumber;
        })[];
        listingPrice: BigNumber;
        createdAt: BigNumber;
      }
    >;

    getTokenomics(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber, BigNumber, BigNumber] & {
        tokenomicsAddr: string;
        tokenomicsName: string;
        tokenomicsPercentage: BigNumber;
        tokenomicsLockedForXSeconds: BigNumber;
        tokenomicsVestedForXSeconds: BigNumber;
      })[]
    >;

    invest(referralAddr: string, overrides?: CallOverrides): Promise<void>;

    listInvestors(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber] & {
        investorAddr: string;
        referralAddr: string;
        wethValue: BigNumber;
      })[]
    >;

    listReferrals(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { referralAddr: string; earnings: BigNumber })[]
    >;

    markGoalAsReached(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    prepareAddLiqudity(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setVestingForInvestorsTokens(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingForReferralsTokens(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingForTokenomicsTokens(overrides?: CallOverrides): Promise<void>;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tokenAddress: string;
        presaleName: string;
        website: string;
        telegram: string;
        uniswapLiquidityLockedFor: BigNumber;
        presaleLockedFor: BigNumber;
        presaleVestedFor: BigNumber;
        referralsLockedFor: BigNumber;
        referralsVestedFor: BigNumber;
        maxWethCap: BigNumber;
        perWalletMinWeth: BigNumber;
        perWalletMaxWeth: BigNumber;
        fixedPriceInDeft: BigNumber;
      }
    >;

    skipSteps1(overrides?: CallOverrides): Promise<void>;

    skipSteps2(limit: BigNumberish, overrides?: CallOverrides): Promise<void>;

    state(overrides?: CallOverrides): Promise<number>;

    totalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSettings(
      _settings: {
        tokenAddress: string;
        presaleName: string;
        website: string;
        telegram: string;
        uniswapLiquidityLockedFor: BigNumberish;
        presaleLockedFor: BigNumberish;
        presaleVestedFor: BigNumberish;
        referralsLockedFor: BigNumberish;
        referralsVestedFor: BigNumberish;
        maxWethCap: BigNumberish;
        perWalletMinWeth: BigNumberish;
        perWalletMaxWeth: BigNumberish;
        fixedPriceInDeft: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "StateChanged(uint8)"(
      newState?: null
    ): TypedEventFilter<[number], { newState: number }>;

    StateChanged(
      newState?: null
    ): TypedEventFilter<[number], { newState: number }>;
  };

  estimateGas: {
    addLiquidityOnUniswapV2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    amountOfTokensForInvestors(overrides?: CallOverrides): Promise<BigNumber>;

    checkIfAllVestingWasSet(overrides?: CallOverrides): Promise<BigNumber>;

    checkIfPairIsCreated(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkIfTokenomicsIsValid(overrides?: CallOverrides): Promise<BigNumber>;

    claimVesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyRefund(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAvailableVestingTokens(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInformation(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenomics(overrides?: CallOverrides): Promise<BigNumber>;

    invest(
      referralAddr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listInvestors(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listReferrals(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markGoalAsReached(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prepareAddLiqudity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVestingForInvestorsTokens(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVestingForReferralsTokens(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVestingForTokenomicsTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    skipSteps1(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    skipSteps2(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSettings(
      _settings: {
        tokenAddress: string;
        presaleName: string;
        website: string;
        telegram: string;
        uniswapLiquidityLockedFor: BigNumberish;
        presaleLockedFor: BigNumberish;
        presaleVestedFor: BigNumberish;
        referralsLockedFor: BigNumberish;
        referralsVestedFor: BigNumberish;
        maxWethCap: BigNumberish;
        perWalletMinWeth: BigNumberish;
        perWalletMaxWeth: BigNumberish;
        fixedPriceInDeft: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidityOnUniswapV2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    amountOfTokensForInvestors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIfAllVestingWasSet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIfPairIsCreated(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkIfTokenomicsIsValid(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimVesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyRefund(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableVestingTokens(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInformation(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenomics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invest(
      referralAddr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listInvestors(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listReferrals(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markGoalAsReached(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareAddLiqudity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVestingForInvestorsTokens(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVestingForReferralsTokens(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVestingForTokenomicsTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    skipSteps1(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    skipSteps2(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTokenSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSettings(
      _settings: {
        tokenAddress: string;
        presaleName: string;
        website: string;
        telegram: string;
        uniswapLiquidityLockedFor: BigNumberish;
        presaleLockedFor: BigNumberish;
        presaleVestedFor: BigNumberish;
        referralsLockedFor: BigNumberish;
        referralsVestedFor: BigNumberish;
        maxWethCap: BigNumberish;
        perWalletMinWeth: BigNumberish;
        perWalletMaxWeth: BigNumberish;
        fixedPriceInDeft: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
