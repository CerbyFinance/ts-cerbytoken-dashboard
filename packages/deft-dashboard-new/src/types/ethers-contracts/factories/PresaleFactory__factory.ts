/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  PresaleFactory,
  PresaleFactoryInterface,
} from "../PresaleFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenomicsAddr",
            type: "address",
          },
          {
            internalType: "string",
            name: "tokenomicsName",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tokenomicsPercentage",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenomicsLockedForXSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenomicsVestedForXSeconds",
            type: "uint256",
          },
        ],
        internalType: "struct Tokenomics[]",
        name: "_tokenomics",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "presaleName",
            type: "string",
          },
          {
            internalType: "string",
            name: "website",
            type: "string",
          },
          {
            internalType: "string",
            name: "telegram",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "uniswapLiquidityLockedFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "presaleLockedFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "presaleVestedFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referralsLockedFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referralsVestedFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxWethCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "perWalletMinWeth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "perWalletMaxWeth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fixedPriceInDeft",
            type: "uint256",
          },
        ],
        internalType: "struct Settings",
        name: "_settings",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum PresaleContract.States",
        name: "newState",
        type: "uint8",
      },
    ],
    name: "StateChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "addLiquidityOnUniswapV2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "amountOfTokensForInvestors",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checkIfAllVestingWasSet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checkIfPairIsCreated",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "checkIfTokenomicsIsValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimVesting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "emergencyRefund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getAvailableVestingTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
    ],
    name: "getInformation",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "presaleContractAddress",
                type: "address",
              },
              {
                internalType: "string",
                name: "presaleName",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "totalInvestedWeth",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxWethCap",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isEnabled",
                type: "bool",
              },
              {
                internalType: "string",
                name: "website",
                type: "string",
              },
              {
                internalType: "string",
                name: "telegram",
                type: "string",
              },
            ],
            internalType: "struct PresaleItem",
            name: "presaleItem",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "walletAddress",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "walletInvestedWeth",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "walletReferralEarnings",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minimumWethPerWallet",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maximumWethPerWallet",
                type: "uint256",
              },
            ],
            internalType: "struct WalletInfo",
            name: "walletInfo",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "vestingAddr",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "tokensReserved",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "tokensClaimed",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lockedUntilTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vestedUntilTimestamp",
                type: "uint256",
              },
            ],
            internalType: "struct Vesting",
            name: "vestingInfo",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenomicsAddr",
                type: "address",
              },
              {
                internalType: "string",
                name: "tokenomicsName",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "tokenomicsPercentage",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "tokenomicsLockedForXSeconds",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "tokenomicsVestedForXSeconds",
                type: "uint256",
              },
            ],
            internalType: "struct Tokenomics[]",
            name: "tokenomics",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "listingPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct OutputItem",
        name: "output",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokenomics",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenomicsAddr",
            type: "address",
          },
          {
            internalType: "string",
            name: "tokenomicsName",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tokenomicsPercentage",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenomicsLockedForXSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenomicsVestedForXSeconds",
            type: "uint256",
          },
        ],
        internalType: "struct Tokenomics[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "referralAddr",
        type: "address",
      },
    ],
    name: "invest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "listInvestors",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "investorAddr",
            type: "address",
          },
          {
            internalType: "address",
            name: "referralAddr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "wethValue",
            type: "uint256",
          },
        ],
        internalType: "struct PresaleContract.Investor[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "listReferrals",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "referralAddr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "earnings",
            type: "uint256",
          },
        ],
        internalType: "struct PresaleContract.Referral[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "markGoalAsReached",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "prepareAddLiqudity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "setVestingForInvestorsTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "setVestingForReferralsTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "setVestingForTokenomicsTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "settings",
    outputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "presaleName",
        type: "string",
      },
      {
        internalType: "string",
        name: "website",
        type: "string",
      },
      {
        internalType: "string",
        name: "telegram",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "uniswapLiquidityLockedFor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "presaleLockedFor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "presaleVestedFor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "referralsLockedFor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "referralsVestedFor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxWethCap",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "perWalletMinWeth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "perWalletMaxWeth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fixedPriceInDeft",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "skipSteps1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "skipSteps2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "enum PresaleContract.States",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalTokenSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "presaleName",
            type: "string",
          },
          {
            internalType: "string",
            name: "website",
            type: "string",
          },
          {
            internalType: "string",
            name: "telegram",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "uniswapLiquidityLockedFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "presaleLockedFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "presaleVestedFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referralsLockedFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referralsVestedFor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxWethCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "perWalletMinWeth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "perWalletMaxWeth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fixedPriceInDeft",
            type: "uint256",
          },
        ],
        internalType: "struct Settings",
        name: "_settings",
        type: "tuple",
      },
    ],
    name: "updateSettings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

export class PresaleFactory__factory {
  static readonly abi = _abi;
  static createInterface(): PresaleFactoryInterface {
    return new utils.Interface(_abi) as PresaleFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PresaleFactory {
    return new Contract(address, _abi, signerOrProvider) as PresaleFactory;
  }
}
